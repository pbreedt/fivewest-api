/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"fmt"
)

// ChargeStatus the model 'ChargeStatus'
type ChargeStatus string

// List of ChargeStatus
const (
	CHARGESTATUS_COMPLETE ChargeStatus = "complete"
	CHARGESTATUS_ACTIVE ChargeStatus = "active"
	CHARGESTATUS_INACTIVE ChargeStatus = "inactive"
)

// All allowed values of ChargeStatus enum
var AllowedChargeStatusEnumValues = []ChargeStatus{
	"complete",
	"active",
	"inactive",
}

func (v *ChargeStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChargeStatus(value)
	for _, existing := range AllowedChargeStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChargeStatus", value)
}

// NewChargeStatusFromValue returns a pointer to a valid ChargeStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChargeStatusFromValue(v string) (*ChargeStatus, error) {
	ev := ChargeStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChargeStatus: valid values are %v", v, AllowedChargeStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChargeStatus) IsValid() bool {
	for _, existing := range AllowedChargeStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChargeStatus value
func (v ChargeStatus) Ptr() *ChargeStatus {
	return &v
}

type NullableChargeStatus struct {
	value *ChargeStatus
	isSet bool
}

func (v NullableChargeStatus) Get() *ChargeStatus {
	return v.value
}

func (v *NullableChargeStatus) Set(val *ChargeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeStatus(val *ChargeStatus) *NullableChargeStatus {
	return &NullableChargeStatus{value: val, isSet: true}
}

func (v NullableChargeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

