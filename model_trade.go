/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Trade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trade{}

// Trade struct for Trade
type Trade struct {
	Uid *string `json:"uid,omitempty"`
	ExchangeAccountId *int32 `json:"exchange_account_id,omitempty"`
	ExchangeTradeId *string `json:"exchange_trade_id,omitempty"`
	BaseCurrency string `json:"base_currency"`
	QuoteCurrency string `json:"quote_currency"`
	Rate float32 `json:"rate"`
	BaseAmount float32 `json:"base_amount"`
	QuoteAmount float32 `json:"quote_amount"`
	Side TradeSide `json:"side"`
	Mode Mode `json:"mode"`
	Type *TradeType `json:"type,omitempty"`
	ConfirmedAt *time.Time `json:"confirmed_at,omitempty"`
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
}

type _Trade Trade

// NewTrade instantiates a new Trade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrade(baseCurrency string, quoteCurrency string, rate float32, baseAmount float32, quoteAmount float32, side TradeSide, mode Mode, id string, createdAt time.Time) *Trade {
	this := Trade{}
	this.BaseCurrency = baseCurrency
	this.QuoteCurrency = quoteCurrency
	this.Rate = rate
	this.BaseAmount = baseAmount
	this.QuoteAmount = quoteAmount
	this.Side = side
	this.Mode = mode
	this.Id = id
	this.CreatedAt = createdAt
	return &this
}

// NewTradeWithDefaults instantiates a new Trade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradeWithDefaults() *Trade {
	this := Trade{}
	return &this
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *Trade) GetUid() string {
	if o == nil || IsNil(o.Uid) {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetUidOk() (*string, bool) {
	if o == nil || IsNil(o.Uid) {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *Trade) HasUid() bool {
	if o != nil && !IsNil(o.Uid) {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *Trade) SetUid(v string) {
	o.Uid = &v
}

// GetExchangeAccountId returns the ExchangeAccountId field value if set, zero value otherwise.
func (o *Trade) GetExchangeAccountId() int32 {
	if o == nil || IsNil(o.ExchangeAccountId) {
		var ret int32
		return ret
	}
	return *o.ExchangeAccountId
}

// GetExchangeAccountIdOk returns a tuple with the ExchangeAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetExchangeAccountIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ExchangeAccountId) {
		return nil, false
	}
	return o.ExchangeAccountId, true
}

// HasExchangeAccountId returns a boolean if a field has been set.
func (o *Trade) HasExchangeAccountId() bool {
	if o != nil && !IsNil(o.ExchangeAccountId) {
		return true
	}

	return false
}

// SetExchangeAccountId gets a reference to the given int32 and assigns it to the ExchangeAccountId field.
func (o *Trade) SetExchangeAccountId(v int32) {
	o.ExchangeAccountId = &v
}

// GetExchangeTradeId returns the ExchangeTradeId field value if set, zero value otherwise.
func (o *Trade) GetExchangeTradeId() string {
	if o == nil || IsNil(o.ExchangeTradeId) {
		var ret string
		return ret
	}
	return *o.ExchangeTradeId
}

// GetExchangeTradeIdOk returns a tuple with the ExchangeTradeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetExchangeTradeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExchangeTradeId) {
		return nil, false
	}
	return o.ExchangeTradeId, true
}

// HasExchangeTradeId returns a boolean if a field has been set.
func (o *Trade) HasExchangeTradeId() bool {
	if o != nil && !IsNil(o.ExchangeTradeId) {
		return true
	}

	return false
}

// SetExchangeTradeId gets a reference to the given string and assigns it to the ExchangeTradeId field.
func (o *Trade) SetExchangeTradeId(v string) {
	o.ExchangeTradeId = &v
}

// GetBaseCurrency returns the BaseCurrency field value
func (o *Trade) GetBaseCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseCurrency
}

// GetBaseCurrencyOk returns a tuple with the BaseCurrency field value
// and a boolean to check if the value has been set.
func (o *Trade) GetBaseCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseCurrency, true
}

// SetBaseCurrency sets field value
func (o *Trade) SetBaseCurrency(v string) {
	o.BaseCurrency = v
}

// GetQuoteCurrency returns the QuoteCurrency field value
func (o *Trade) GetQuoteCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteCurrency
}

// GetQuoteCurrencyOk returns a tuple with the QuoteCurrency field value
// and a boolean to check if the value has been set.
func (o *Trade) GetQuoteCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteCurrency, true
}

// SetQuoteCurrency sets field value
func (o *Trade) SetQuoteCurrency(v string) {
	o.QuoteCurrency = v
}

// GetRate returns the Rate field value
func (o *Trade) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *Trade) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *Trade) SetRate(v float32) {
	o.Rate = v
}

// GetBaseAmount returns the BaseAmount field value
func (o *Trade) GetBaseAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseAmount
}

// GetBaseAmountOk returns a tuple with the BaseAmount field value
// and a boolean to check if the value has been set.
func (o *Trade) GetBaseAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseAmount, true
}

// SetBaseAmount sets field value
func (o *Trade) SetBaseAmount(v float32) {
	o.BaseAmount = v
}

// GetQuoteAmount returns the QuoteAmount field value
func (o *Trade) GetQuoteAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.QuoteAmount
}

// GetQuoteAmountOk returns a tuple with the QuoteAmount field value
// and a boolean to check if the value has been set.
func (o *Trade) GetQuoteAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteAmount, true
}

// SetQuoteAmount sets field value
func (o *Trade) SetQuoteAmount(v float32) {
	o.QuoteAmount = v
}

// GetSide returns the Side field value
func (o *Trade) GetSide() TradeSide {
	if o == nil {
		var ret TradeSide
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *Trade) GetSideOk() (*TradeSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *Trade) SetSide(v TradeSide) {
	o.Side = v
}

// GetMode returns the Mode field value
func (o *Trade) GetMode() Mode {
	if o == nil {
		var ret Mode
		return ret
	}

	return o.Mode
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
func (o *Trade) GetModeOk() (*Mode, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Mode, true
}

// SetMode sets field value
func (o *Trade) SetMode(v Mode) {
	o.Mode = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Trade) GetType() TradeType {
	if o == nil || IsNil(o.Type) {
		var ret TradeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetTypeOk() (*TradeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Trade) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TradeType and assigns it to the Type field.
func (o *Trade) SetType(v TradeType) {
	o.Type = &v
}

// GetConfirmedAt returns the ConfirmedAt field value if set, zero value otherwise.
func (o *Trade) GetConfirmedAt() time.Time {
	if o == nil || IsNil(o.ConfirmedAt) {
		var ret time.Time
		return ret
	}
	return *o.ConfirmedAt
}

// GetConfirmedAtOk returns a tuple with the ConfirmedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trade) GetConfirmedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ConfirmedAt) {
		return nil, false
	}
	return o.ConfirmedAt, true
}

// HasConfirmedAt returns a boolean if a field has been set.
func (o *Trade) HasConfirmedAt() bool {
	if o != nil && !IsNil(o.ConfirmedAt) {
		return true
	}

	return false
}

// SetConfirmedAt gets a reference to the given time.Time and assigns it to the ConfirmedAt field.
func (o *Trade) SetConfirmedAt(v time.Time) {
	o.ConfirmedAt = &v
}

// GetId returns the Id field value
func (o *Trade) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Trade) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Trade) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Trade) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Trade) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Trade) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Trade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uid) {
		toSerialize["uid"] = o.Uid
	}
	if !IsNil(o.ExchangeAccountId) {
		toSerialize["exchange_account_id"] = o.ExchangeAccountId
	}
	if !IsNil(o.ExchangeTradeId) {
		toSerialize["exchange_trade_id"] = o.ExchangeTradeId
	}
	toSerialize["base_currency"] = o.BaseCurrency
	toSerialize["quote_currency"] = o.QuoteCurrency
	toSerialize["rate"] = o.Rate
	toSerialize["base_amount"] = o.BaseAmount
	toSerialize["quote_amount"] = o.QuoteAmount
	toSerialize["side"] = o.Side
	toSerialize["mode"] = o.Mode
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ConfirmedAt) {
		toSerialize["confirmed_at"] = o.ConfirmedAt
	}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Trade) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"base_currency",
		"quote_currency",
		"rate",
		"base_amount",
		"quote_amount",
		"side",
		"mode",
		"id",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrade := _Trade{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrade)

	if err != nil {
		return err
	}

	*o = Trade(varTrade)

	return err
}

type NullableTrade struct {
	value *Trade
	isSet bool
}

func (v NullableTrade) Get() *Trade {
	return v.value
}

func (v *NullableTrade) Set(val *Trade) {
	v.value = val
	v.isSet = true
}

func (v NullableTrade) IsSet() bool {
	return v.isSet
}

func (v *NullableTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrade(val *Trade) *NullableTrade {
	return &NullableTrade{value: val, isSet: true}
}

func (v NullableTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


