/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PageTrade type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PageTrade{}

// PageTrade struct for PageTrade
type PageTrade struct {
	Items []Trade `json:"items"`
	Total int32 `json:"total"`
	Pages int32 `json:"pages"`
	Size *int32 `json:"size,omitempty"`
	HasNext *bool `json:"has_next,omitempty"`
	HasPrev *bool `json:"has_prev,omitempty"`
}

type _PageTrade PageTrade

// NewPageTrade instantiates a new PageTrade object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPageTrade(items []Trade, total int32, pages int32) *PageTrade {
	this := PageTrade{}
	this.Items = items
	this.Total = total
	this.Pages = pages
	var hasNext bool = false
	this.HasNext = &hasNext
	var hasPrev bool = false
	this.HasPrev = &hasPrev
	return &this
}

// NewPageTradeWithDefaults instantiates a new PageTrade object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPageTradeWithDefaults() *PageTrade {
	this := PageTrade{}
	var hasNext bool = false
	this.HasNext = &hasNext
	var hasPrev bool = false
	this.HasPrev = &hasPrev
	return &this
}

// GetItems returns the Items field value
func (o *PageTrade) GetItems() []Trade {
	if o == nil {
		var ret []Trade
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *PageTrade) GetItemsOk() ([]Trade, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *PageTrade) SetItems(v []Trade) {
	o.Items = v
}

// GetTotal returns the Total field value
func (o *PageTrade) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *PageTrade) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *PageTrade) SetTotal(v int32) {
	o.Total = v
}

// GetPages returns the Pages field value
func (o *PageTrade) GetPages() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value
// and a boolean to check if the value has been set.
func (o *PageTrade) GetPagesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pages, true
}

// SetPages sets field value
func (o *PageTrade) SetPages(v int32) {
	o.Pages = v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *PageTrade) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTrade) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *PageTrade) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *PageTrade) SetSize(v int32) {
	o.Size = &v
}

// GetHasNext returns the HasNext field value if set, zero value otherwise.
func (o *PageTrade) GetHasNext() bool {
	if o == nil || IsNil(o.HasNext) {
		var ret bool
		return ret
	}
	return *o.HasNext
}

// GetHasNextOk returns a tuple with the HasNext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTrade) GetHasNextOk() (*bool, bool) {
	if o == nil || IsNil(o.HasNext) {
		return nil, false
	}
	return o.HasNext, true
}

// HasHasNext returns a boolean if a field has been set.
func (o *PageTrade) HasHasNext() bool {
	if o != nil && !IsNil(o.HasNext) {
		return true
	}

	return false
}

// SetHasNext gets a reference to the given bool and assigns it to the HasNext field.
func (o *PageTrade) SetHasNext(v bool) {
	o.HasNext = &v
}

// GetHasPrev returns the HasPrev field value if set, zero value otherwise.
func (o *PageTrade) GetHasPrev() bool {
	if o == nil || IsNil(o.HasPrev) {
		var ret bool
		return ret
	}
	return *o.HasPrev
}

// GetHasPrevOk returns a tuple with the HasPrev field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PageTrade) GetHasPrevOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPrev) {
		return nil, false
	}
	return o.HasPrev, true
}

// HasHasPrev returns a boolean if a field has been set.
func (o *PageTrade) HasHasPrev() bool {
	if o != nil && !IsNil(o.HasPrev) {
		return true
	}

	return false
}

// SetHasPrev gets a reference to the given bool and assigns it to the HasPrev field.
func (o *PageTrade) SetHasPrev(v bool) {
	o.HasPrev = &v
}

func (o PageTrade) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PageTrade) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	toSerialize["total"] = o.Total
	toSerialize["pages"] = o.Pages
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.HasNext) {
		toSerialize["has_next"] = o.HasNext
	}
	if !IsNil(o.HasPrev) {
		toSerialize["has_prev"] = o.HasPrev
	}
	return toSerialize, nil
}

func (o *PageTrade) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
		"total",
		"pages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPageTrade := _PageTrade{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPageTrade)

	if err != nil {
		return err
	}

	*o = PageTrade(varPageTrade)

	return err
}

type NullablePageTrade struct {
	value *PageTrade
	isSet bool
}

func (v NullablePageTrade) Get() *PageTrade {
	return v.value
}

func (v *NullablePageTrade) Set(val *PageTrade) {
	v.value = val
	v.isSet = true
}

func (v NullablePageTrade) IsSet() bool {
	return v.isSet
}

func (v *NullablePageTrade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePageTrade(val *PageTrade) *NullablePageTrade {
	return &NullablePageTrade{value: val, isSet: true}
}

func (v NullablePageTrade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePageTrade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


