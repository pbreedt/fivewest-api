/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DepositAddresses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepositAddresses{}

// DepositAddresses struct for DepositAddresses
type DepositAddresses struct {
	Symbol string `json:"symbol"`
	Free *float32 `json:"free,omitempty"`
	Locked *float32 `json:"locked,omitempty"`
	NetworkAddresses []NetworkAddress `json:"network_addresses"`
}

type _DepositAddresses DepositAddresses

// NewDepositAddresses instantiates a new DepositAddresses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepositAddresses(symbol string, networkAddresses []NetworkAddress) *DepositAddresses {
	this := DepositAddresses{}
	this.Symbol = symbol
	var free float32 = 0
	this.Free = &free
	var locked float32 = 0
	this.Locked = &locked
	this.NetworkAddresses = networkAddresses
	return &this
}

// NewDepositAddressesWithDefaults instantiates a new DepositAddresses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepositAddressesWithDefaults() *DepositAddresses {
	this := DepositAddresses{}
	var free float32 = 0
	this.Free = &free
	var locked float32 = 0
	this.Locked = &locked
	return &this
}

// GetSymbol returns the Symbol field value
func (o *DepositAddresses) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *DepositAddresses) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *DepositAddresses) SetSymbol(v string) {
	o.Symbol = v
}

// GetFree returns the Free field value if set, zero value otherwise.
func (o *DepositAddresses) GetFree() float32 {
	if o == nil || IsNil(o.Free) {
		var ret float32
		return ret
	}
	return *o.Free
}

// GetFreeOk returns a tuple with the Free field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositAddresses) GetFreeOk() (*float32, bool) {
	if o == nil || IsNil(o.Free) {
		return nil, false
	}
	return o.Free, true
}

// HasFree returns a boolean if a field has been set.
func (o *DepositAddresses) HasFree() bool {
	if o != nil && !IsNil(o.Free) {
		return true
	}

	return false
}

// SetFree gets a reference to the given float32 and assigns it to the Free field.
func (o *DepositAddresses) SetFree(v float32) {
	o.Free = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise.
func (o *DepositAddresses) GetLocked() float32 {
	if o == nil || IsNil(o.Locked) {
		var ret float32
		return ret
	}
	return *o.Locked
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepositAddresses) GetLockedOk() (*float32, bool) {
	if o == nil || IsNil(o.Locked) {
		return nil, false
	}
	return o.Locked, true
}

// HasLocked returns a boolean if a field has been set.
func (o *DepositAddresses) HasLocked() bool {
	if o != nil && !IsNil(o.Locked) {
		return true
	}

	return false
}

// SetLocked gets a reference to the given float32 and assigns it to the Locked field.
func (o *DepositAddresses) SetLocked(v float32) {
	o.Locked = &v
}

// GetNetworkAddresses returns the NetworkAddresses field value
func (o *DepositAddresses) GetNetworkAddresses() []NetworkAddress {
	if o == nil {
		var ret []NetworkAddress
		return ret
	}

	return o.NetworkAddresses
}

// GetNetworkAddressesOk returns a tuple with the NetworkAddresses field value
// and a boolean to check if the value has been set.
func (o *DepositAddresses) GetNetworkAddressesOk() ([]NetworkAddress, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkAddresses, true
}

// SetNetworkAddresses sets field value
func (o *DepositAddresses) SetNetworkAddresses(v []NetworkAddress) {
	o.NetworkAddresses = v
}

func (o DepositAddresses) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepositAddresses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["symbol"] = o.Symbol
	if !IsNil(o.Free) {
		toSerialize["free"] = o.Free
	}
	if !IsNil(o.Locked) {
		toSerialize["locked"] = o.Locked
	}
	toSerialize["network_addresses"] = o.NetworkAddresses
	return toSerialize, nil
}

func (o *DepositAddresses) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"symbol",
		"network_addresses",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDepositAddresses := _DepositAddresses{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDepositAddresses)

	if err != nil {
		return err
	}

	*o = DepositAddresses(varDepositAddresses)

	return err
}

type NullableDepositAddresses struct {
	value *DepositAddresses
	isSet bool
}

func (v NullableDepositAddresses) Get() *DepositAddresses {
	return v.value
}

func (v *NullableDepositAddresses) Set(val *DepositAddresses) {
	v.value = val
	v.isSet = true
}

func (v NullableDepositAddresses) IsSet() bool {
	return v.isSet
}

func (v *NullableDepositAddresses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepositAddresses(val *DepositAddresses) *NullableDepositAddresses {
	return &NullableDepositAddresses{value: val, isSet: true}
}

func (v NullableDepositAddresses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepositAddresses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


