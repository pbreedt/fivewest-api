/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CurrencyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CurrencyResponse{}

// CurrencyResponse struct for CurrencyResponse
type CurrencyResponse struct {
	UpdatedAt NullableTime `json:"updated_at,omitempty"`
	Id string `json:"id"`
	Symbol string `json:"symbol"`
	Network string `json:"network"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	Fiat *bool `json:"fiat,omitempty"`
	ExpiryDelta *int32 `json:"expiry_delta,omitempty"`
	Scale int32 `json:"scale"`
}

type _CurrencyResponse CurrencyResponse

// NewCurrencyResponse instantiates a new CurrencyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyResponse(id string, symbol string, network string, scale int32) *CurrencyResponse {
	this := CurrencyResponse{}
	this.Id = id
	this.Symbol = symbol
	this.Network = network
	var fiat bool = false
	this.Fiat = &fiat
	this.Scale = scale
	return &this
}

// NewCurrencyResponseWithDefaults instantiates a new CurrencyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyResponseWithDefaults() *CurrencyResponse {
	this := CurrencyResponse{}
	var fiat bool = false
	this.Fiat = &fiat
	return &this
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *CurrencyResponse) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *CurrencyResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *CurrencyResponse) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *CurrencyResponse) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetId returns the Id field value
func (o *CurrencyResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CurrencyResponse) SetId(v string) {
	o.Id = v
}

// GetSymbol returns the Symbol field value
func (o *CurrencyResponse) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *CurrencyResponse) SetSymbol(v string) {
	o.Symbol = v
}

// GetNetwork returns the Network field value
func (o *CurrencyResponse) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *CurrencyResponse) SetNetwork(v string) {
	o.Network = v
}

// GetMeta returns the Meta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CurrencyResponse) GetMeta() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CurrencyResponse) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *CurrencyResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *CurrencyResponse) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

// GetFiat returns the Fiat field value if set, zero value otherwise.
func (o *CurrencyResponse) GetFiat() bool {
	if o == nil || IsNil(o.Fiat) {
		var ret bool
		return ret
	}
	return *o.Fiat
}

// GetFiatOk returns a tuple with the Fiat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetFiatOk() (*bool, bool) {
	if o == nil || IsNil(o.Fiat) {
		return nil, false
	}
	return o.Fiat, true
}

// HasFiat returns a boolean if a field has been set.
func (o *CurrencyResponse) HasFiat() bool {
	if o != nil && !IsNil(o.Fiat) {
		return true
	}

	return false
}

// SetFiat gets a reference to the given bool and assigns it to the Fiat field.
func (o *CurrencyResponse) SetFiat(v bool) {
	o.Fiat = &v
}

// GetExpiryDelta returns the ExpiryDelta field value if set, zero value otherwise.
func (o *CurrencyResponse) GetExpiryDelta() int32 {
	if o == nil || IsNil(o.ExpiryDelta) {
		var ret int32
		return ret
	}
	return *o.ExpiryDelta
}

// GetExpiryDeltaOk returns a tuple with the ExpiryDelta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetExpiryDeltaOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiryDelta) {
		return nil, false
	}
	return o.ExpiryDelta, true
}

// HasExpiryDelta returns a boolean if a field has been set.
func (o *CurrencyResponse) HasExpiryDelta() bool {
	if o != nil && !IsNil(o.ExpiryDelta) {
		return true
	}

	return false
}

// SetExpiryDelta gets a reference to the given int32 and assigns it to the ExpiryDelta field.
func (o *CurrencyResponse) SetExpiryDelta(v int32) {
	o.ExpiryDelta = &v
}

// GetScale returns the Scale field value
func (o *CurrencyResponse) GetScale() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Scale
}

// GetScaleOk returns a tuple with the Scale field value
// and a boolean to check if the value has been set.
func (o *CurrencyResponse) GetScaleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scale, true
}

// SetScale sets field value
func (o *CurrencyResponse) SetScale(v int32) {
	o.Scale = v
}

func (o CurrencyResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CurrencyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UpdatedAt.IsSet() {
		toSerialize["updated_at"] = o.UpdatedAt.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["symbol"] = o.Symbol
	toSerialize["network"] = o.Network
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Fiat) {
		toSerialize["fiat"] = o.Fiat
	}
	if !IsNil(o.ExpiryDelta) {
		toSerialize["expiry_delta"] = o.ExpiryDelta
	}
	toSerialize["scale"] = o.Scale
	return toSerialize, nil
}

func (o *CurrencyResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"symbol",
		"network",
		"scale",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCurrencyResponse := _CurrencyResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCurrencyResponse)

	if err != nil {
		return err
	}

	*o = CurrencyResponse(varCurrencyResponse)

	return err
}

type NullableCurrencyResponse struct {
	value *CurrencyResponse
	isSet bool
}

func (v NullableCurrencyResponse) Get() *CurrencyResponse {
	return v.value
}

func (v *NullableCurrencyResponse) Set(val *CurrencyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyResponse(val *CurrencyResponse) *NullableCurrencyResponse {
	return &NullableCurrencyResponse{value: val, isSet: true}
}

func (v NullableCurrencyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


