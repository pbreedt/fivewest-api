/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the NetworkAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkAddress{}

// NetworkAddress struct for NetworkAddress
type NetworkAddress struct {
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	UpdatedBy *string `json:"updated_by,omitempty"`
	Id int32 `json:"id"`
	Symbol string `json:"symbol"`
	Network *string `json:"network,omitempty"`
	DepositsEnabled *bool `json:"deposits_enabled,omitempty"`
	WithdrawalsEnabled *bool `json:"withdrawals_enabled,omitempty"`
	WithdrawalFee *float32 `json:"withdrawal_fee,omitempty"`
	MaxWithdraw *float32 `json:"max_withdraw,omitempty"`
	MinWithdraw *float32 `json:"min_withdraw,omitempty"`
	Meta *map[string]Meta `json:"meta,omitempty"`
	Active *bool `json:"active,omitempty"`
	Fiat *bool `json:"fiat,omitempty"`
	Scale *int32 `json:"scale,omitempty"`
	Address string `json:"address"`
}

type _NetworkAddress NetworkAddress

// NewNetworkAddress instantiates a new NetworkAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkAddress(id int32, symbol string, address string) *NetworkAddress {
	this := NetworkAddress{}
	this.Id = id
	this.Symbol = symbol
	var depositsEnabled bool = true
	this.DepositsEnabled = &depositsEnabled
	var withdrawalsEnabled bool = true
	this.WithdrawalsEnabled = &withdrawalsEnabled
	var withdrawalFee float32 = 0
	this.WithdrawalFee = &withdrawalFee
	var minWithdraw float32 = 0
	this.MinWithdraw = &minWithdraw
	var active bool = false
	this.Active = &active
	var fiat bool = false
	this.Fiat = &fiat
	var scale int32 = 8
	this.Scale = &scale
	this.Address = address
	return &this
}

// NewNetworkAddressWithDefaults instantiates a new NetworkAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkAddressWithDefaults() *NetworkAddress {
	this := NetworkAddress{}
	var depositsEnabled bool = true
	this.DepositsEnabled = &depositsEnabled
	var withdrawalsEnabled bool = true
	this.WithdrawalsEnabled = &withdrawalsEnabled
	var withdrawalFee float32 = 0
	this.WithdrawalFee = &withdrawalFee
	var minWithdraw float32 = 0
	this.MinWithdraw = &minWithdraw
	var active bool = false
	this.Active = &active
	var fiat bool = false
	this.Fiat = &fiat
	var scale int32 = 8
	this.Scale = &scale
	return &this
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NetworkAddress) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NetworkAddress) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *NetworkAddress) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *NetworkAddress) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *NetworkAddress) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *NetworkAddress) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetId returns the Id field value
func (o *NetworkAddress) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NetworkAddress) SetId(v int32) {
	o.Id = v
}

// GetSymbol returns the Symbol field value
func (o *NetworkAddress) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *NetworkAddress) SetSymbol(v string) {
	o.Symbol = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *NetworkAddress) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *NetworkAddress) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *NetworkAddress) SetNetwork(v string) {
	o.Network = &v
}

// GetDepositsEnabled returns the DepositsEnabled field value if set, zero value otherwise.
func (o *NetworkAddress) GetDepositsEnabled() bool {
	if o == nil || IsNil(o.DepositsEnabled) {
		var ret bool
		return ret
	}
	return *o.DepositsEnabled
}

// GetDepositsEnabledOk returns a tuple with the DepositsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetDepositsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DepositsEnabled) {
		return nil, false
	}
	return o.DepositsEnabled, true
}

// HasDepositsEnabled returns a boolean if a field has been set.
func (o *NetworkAddress) HasDepositsEnabled() bool {
	if o != nil && !IsNil(o.DepositsEnabled) {
		return true
	}

	return false
}

// SetDepositsEnabled gets a reference to the given bool and assigns it to the DepositsEnabled field.
func (o *NetworkAddress) SetDepositsEnabled(v bool) {
	o.DepositsEnabled = &v
}

// GetWithdrawalsEnabled returns the WithdrawalsEnabled field value if set, zero value otherwise.
func (o *NetworkAddress) GetWithdrawalsEnabled() bool {
	if o == nil || IsNil(o.WithdrawalsEnabled) {
		var ret bool
		return ret
	}
	return *o.WithdrawalsEnabled
}

// GetWithdrawalsEnabledOk returns a tuple with the WithdrawalsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetWithdrawalsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.WithdrawalsEnabled) {
		return nil, false
	}
	return o.WithdrawalsEnabled, true
}

// HasWithdrawalsEnabled returns a boolean if a field has been set.
func (o *NetworkAddress) HasWithdrawalsEnabled() bool {
	if o != nil && !IsNil(o.WithdrawalsEnabled) {
		return true
	}

	return false
}

// SetWithdrawalsEnabled gets a reference to the given bool and assigns it to the WithdrawalsEnabled field.
func (o *NetworkAddress) SetWithdrawalsEnabled(v bool) {
	o.WithdrawalsEnabled = &v
}

// GetWithdrawalFee returns the WithdrawalFee field value if set, zero value otherwise.
func (o *NetworkAddress) GetWithdrawalFee() float32 {
	if o == nil || IsNil(o.WithdrawalFee) {
		var ret float32
		return ret
	}
	return *o.WithdrawalFee
}

// GetWithdrawalFeeOk returns a tuple with the WithdrawalFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetWithdrawalFeeOk() (*float32, bool) {
	if o == nil || IsNil(o.WithdrawalFee) {
		return nil, false
	}
	return o.WithdrawalFee, true
}

// HasWithdrawalFee returns a boolean if a field has been set.
func (o *NetworkAddress) HasWithdrawalFee() bool {
	if o != nil && !IsNil(o.WithdrawalFee) {
		return true
	}

	return false
}

// SetWithdrawalFee gets a reference to the given float32 and assigns it to the WithdrawalFee field.
func (o *NetworkAddress) SetWithdrawalFee(v float32) {
	o.WithdrawalFee = &v
}

// GetMaxWithdraw returns the MaxWithdraw field value if set, zero value otherwise.
func (o *NetworkAddress) GetMaxWithdraw() float32 {
	if o == nil || IsNil(o.MaxWithdraw) {
		var ret float32
		return ret
	}
	return *o.MaxWithdraw
}

// GetMaxWithdrawOk returns a tuple with the MaxWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetMaxWithdrawOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxWithdraw) {
		return nil, false
	}
	return o.MaxWithdraw, true
}

// HasMaxWithdraw returns a boolean if a field has been set.
func (o *NetworkAddress) HasMaxWithdraw() bool {
	if o != nil && !IsNil(o.MaxWithdraw) {
		return true
	}

	return false
}

// SetMaxWithdraw gets a reference to the given float32 and assigns it to the MaxWithdraw field.
func (o *NetworkAddress) SetMaxWithdraw(v float32) {
	o.MaxWithdraw = &v
}

// GetMinWithdraw returns the MinWithdraw field value if set, zero value otherwise.
func (o *NetworkAddress) GetMinWithdraw() float32 {
	if o == nil || IsNil(o.MinWithdraw) {
		var ret float32
		return ret
	}
	return *o.MinWithdraw
}

// GetMinWithdrawOk returns a tuple with the MinWithdraw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetMinWithdrawOk() (*float32, bool) {
	if o == nil || IsNil(o.MinWithdraw) {
		return nil, false
	}
	return o.MinWithdraw, true
}

// HasMinWithdraw returns a boolean if a field has been set.
func (o *NetworkAddress) HasMinWithdraw() bool {
	if o != nil && !IsNil(o.MinWithdraw) {
		return true
	}

	return false
}

// SetMinWithdraw gets a reference to the given float32 and assigns it to the MinWithdraw field.
func (o *NetworkAddress) SetMinWithdraw(v float32) {
	o.MinWithdraw = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *NetworkAddress) GetMeta() map[string]Meta {
	if o == nil || IsNil(o.Meta) {
		var ret map[string]Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetMetaOk() (*map[string]Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *NetworkAddress) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]Meta and assigns it to the Meta field.
func (o *NetworkAddress) SetMeta(v map[string]Meta) {
	o.Meta = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *NetworkAddress) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *NetworkAddress) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *NetworkAddress) SetActive(v bool) {
	o.Active = &v
}

// GetFiat returns the Fiat field value if set, zero value otherwise.
func (o *NetworkAddress) GetFiat() bool {
	if o == nil || IsNil(o.Fiat) {
		var ret bool
		return ret
	}
	return *o.Fiat
}

// GetFiatOk returns a tuple with the Fiat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetFiatOk() (*bool, bool) {
	if o == nil || IsNil(o.Fiat) {
		return nil, false
	}
	return o.Fiat, true
}

// HasFiat returns a boolean if a field has been set.
func (o *NetworkAddress) HasFiat() bool {
	if o != nil && !IsNil(o.Fiat) {
		return true
	}

	return false
}

// SetFiat gets a reference to the given bool and assigns it to the Fiat field.
func (o *NetworkAddress) SetFiat(v bool) {
	o.Fiat = &v
}

// GetScale returns the Scale field value if set, zero value otherwise.
func (o *NetworkAddress) GetScale() int32 {
	if o == nil || IsNil(o.Scale) {
		var ret int32
		return ret
	}
	return *o.Scale
}

// GetScaleOk returns a tuple with the Scale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetScaleOk() (*int32, bool) {
	if o == nil || IsNil(o.Scale) {
		return nil, false
	}
	return o.Scale, true
}

// HasScale returns a boolean if a field has been set.
func (o *NetworkAddress) HasScale() bool {
	if o != nil && !IsNil(o.Scale) {
		return true
	}

	return false
}

// SetScale gets a reference to the given int32 and assigns it to the Scale field.
func (o *NetworkAddress) SetScale(v int32) {
	o.Scale = &v
}

// GetAddress returns the Address field value
func (o *NetworkAddress) GetAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Address
}

// GetAddressOk returns a tuple with the Address field value
// and a boolean to check if the value has been set.
func (o *NetworkAddress) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Address, true
}

// SetAddress sets field value
func (o *NetworkAddress) SetAddress(v string) {
	o.Address = v
}

func (o NetworkAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	toSerialize["id"] = o.Id
	toSerialize["symbol"] = o.Symbol
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.DepositsEnabled) {
		toSerialize["deposits_enabled"] = o.DepositsEnabled
	}
	if !IsNil(o.WithdrawalsEnabled) {
		toSerialize["withdrawals_enabled"] = o.WithdrawalsEnabled
	}
	if !IsNil(o.WithdrawalFee) {
		toSerialize["withdrawal_fee"] = o.WithdrawalFee
	}
	if !IsNil(o.MaxWithdraw) {
		toSerialize["max_withdraw"] = o.MaxWithdraw
	}
	if !IsNil(o.MinWithdraw) {
		toSerialize["min_withdraw"] = o.MinWithdraw
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Fiat) {
		toSerialize["fiat"] = o.Fiat
	}
	if !IsNil(o.Scale) {
		toSerialize["scale"] = o.Scale
	}
	toSerialize["address"] = o.Address
	return toSerialize, nil
}

func (o *NetworkAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"symbol",
		"address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetworkAddress := _NetworkAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetworkAddress)

	if err != nil {
		return err
	}

	*o = NetworkAddress(varNetworkAddress)

	return err
}

type NullableNetworkAddress struct {
	value *NetworkAddress
	isSet bool
}

func (v NullableNetworkAddress) Get() *NetworkAddress {
	return v.value
}

func (v *NullableNetworkAddress) Set(val *NetworkAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkAddress(val *NetworkAddress) *NullableNetworkAddress {
	return &NullableNetworkAddress{value: val, isSet: true}
}

func (v NullableNetworkAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


