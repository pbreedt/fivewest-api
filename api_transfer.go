/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"time"
)


// TransferAPIService TransferAPI service
type TransferAPIService service

type ApiGetAllTransfersApiV1TransferGetRequest struct {
	ctx context.Context
	ApiService *TransferAPIService
	symbol *string
	origin *TransferLocation
	destination *TransferLocation
	external *bool
	page *int32
	pageSize *int32
	start *time.Time
	end *time.Time
}

func (r ApiGetAllTransfersApiV1TransferGetRequest) Symbol(symbol string) ApiGetAllTransfersApiV1TransferGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiGetAllTransfersApiV1TransferGetRequest) Origin(origin TransferLocation) ApiGetAllTransfersApiV1TransferGetRequest {
	r.origin = &origin
	return r
}

func (r ApiGetAllTransfersApiV1TransferGetRequest) Destination(destination TransferLocation) ApiGetAllTransfersApiV1TransferGetRequest {
	r.destination = &destination
	return r
}

func (r ApiGetAllTransfersApiV1TransferGetRequest) External(external bool) ApiGetAllTransfersApiV1TransferGetRequest {
	r.external = &external
	return r
}

func (r ApiGetAllTransfersApiV1TransferGetRequest) Page(page int32) ApiGetAllTransfersApiV1TransferGetRequest {
	r.page = &page
	return r
}

func (r ApiGetAllTransfersApiV1TransferGetRequest) PageSize(pageSize int32) ApiGetAllTransfersApiV1TransferGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetAllTransfersApiV1TransferGetRequest) Start(start time.Time) ApiGetAllTransfersApiV1TransferGetRequest {
	r.start = &start
	return r
}

func (r ApiGetAllTransfersApiV1TransferGetRequest) End(end time.Time) ApiGetAllTransfersApiV1TransferGetRequest {
	r.end = &end
	return r
}

func (r ApiGetAllTransfersApiV1TransferGetRequest) Execute() (*Page, *http.Response, error) {
	return r.ApiService.GetAllTransfersApiV1TransferGetExecute(r)
}

/*
GetAllTransfersApiV1TransferGet Get All Transfers

Gets all transfers with pagination

Query Parameters
-----------
- `page` **(optional)**: Page number/window to query for (defaults to 0 for the first page).
- `page_size` **(optional)**: Size of the page returned (defaults to 1, maximum size = 1000 records).
- `symbol` **(optional)**: Name of currency to filter on (e.g. BTC).
- `external` **(optional)**: Filter on internal or external transfer, if null, returns all records.
- `origin_uid` **(optional)**: Filter on the UID of the sender/origin account (only applicable to peer-to-peer).
- `destination_uid` **(optional)**: Filter on the UID of the receiver/destination account (only applicable to peer-to-peer).
- `origin` **(optional)**: Filter on the type of the origin service/wallet.
- `destination` **(optional)**: Filter on the type of the destination service/wallet.
- `start` **(optional)**: Start date-time pagination.
- `end` **(optional)**: End date-time pagination.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllTransfersApiV1TransferGetRequest
*/
func (a *TransferAPIService) GetAllTransfersApiV1TransferGet(ctx context.Context) ApiGetAllTransfersApiV1TransferGetRequest {
	return ApiGetAllTransfersApiV1TransferGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Page
func (a *TransferAPIService) GetAllTransfersApiV1TransferGetExecute(r ApiGetAllTransfersApiV1TransferGetRequest) (*Page, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Page
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TransferAPIService.GetAllTransfersApiV1TransferGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wallet/api/v1/transfer"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "")
	}
	if r.origin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "origin", r.origin, "")
	}
	if r.destination != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "destination", r.destination, "")
	}
	if r.external != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "external", r.external, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	} else {
		var defaultValue int32 = 1
		r.pageSize = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
