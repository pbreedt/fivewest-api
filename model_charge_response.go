/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ChargeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeResponse{}

// ChargeResponse struct for ChargeResponse
type ChargeResponse struct {
	UpdatedAt NullableTime `json:"updated_at,omitempty"`
	Id string `json:"id"`
	SubMerchantUid NullableString `json:"sub_merchant_uid,omitempty"`
	OrderId string `json:"order_id"`
	OrderAmount string `json:"order_amount"`
	OrderCurrency CurrencyResponse `json:"order_currency"`
	Fee string `json:"fee"`
	Meta NullableChargeMetaOutput `json:"meta,omitempty"`
	Status *ChargeStatus `json:"status,omitempty"`
	SettlementAmount NullableString `json:"settlement_amount,omitempty"`
}

type _ChargeResponse ChargeResponse

// NewChargeResponse instantiates a new ChargeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeResponse(id string, orderId string, orderAmount string, orderCurrency CurrencyResponse, fee string) *ChargeResponse {
	this := ChargeResponse{}
	this.Id = id
	this.OrderId = orderId
	this.OrderAmount = orderAmount
	this.OrderCurrency = orderCurrency
	this.Fee = fee
	var status ChargeStatus = CHARGESTATUS_ACTIVE
	this.Status = &status
	return &this
}

// NewChargeResponseWithDefaults instantiates a new ChargeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeResponseWithDefaults() *ChargeResponse {
	this := ChargeResponse{}
	var status ChargeStatus = CHARGESTATUS_ACTIVE
	this.Status = &status
	return &this
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ChargeResponse) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *ChargeResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *ChargeResponse) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *ChargeResponse) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetId returns the Id field value
func (o *ChargeResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChargeResponse) SetId(v string) {
	o.Id = v
}

// GetSubMerchantUid returns the SubMerchantUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeResponse) GetSubMerchantUid() string {
	if o == nil || IsNil(o.SubMerchantUid.Get()) {
		var ret string
		return ret
	}
	return *o.SubMerchantUid.Get()
}

// GetSubMerchantUidOk returns a tuple with the SubMerchantUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeResponse) GetSubMerchantUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubMerchantUid.Get(), o.SubMerchantUid.IsSet()
}

// HasSubMerchantUid returns a boolean if a field has been set.
func (o *ChargeResponse) HasSubMerchantUid() bool {
	if o != nil && o.SubMerchantUid.IsSet() {
		return true
	}

	return false
}

// SetSubMerchantUid gets a reference to the given NullableString and assigns it to the SubMerchantUid field.
func (o *ChargeResponse) SetSubMerchantUid(v string) {
	o.SubMerchantUid.Set(&v)
}
// SetSubMerchantUidNil sets the value for SubMerchantUid to be an explicit nil
func (o *ChargeResponse) SetSubMerchantUidNil() {
	o.SubMerchantUid.Set(nil)
}

// UnsetSubMerchantUid ensures that no value is present for SubMerchantUid, not even an explicit nil
func (o *ChargeResponse) UnsetSubMerchantUid() {
	o.SubMerchantUid.Unset()
}

// GetOrderId returns the OrderId field value
func (o *ChargeResponse) GetOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *ChargeResponse) SetOrderId(v string) {
	o.OrderId = v
}

// GetOrderAmount returns the OrderAmount field value
func (o *ChargeResponse) GetOrderAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderAmount
}

// GetOrderAmountOk returns a tuple with the OrderAmount field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetOrderAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderAmount, true
}

// SetOrderAmount sets field value
func (o *ChargeResponse) SetOrderAmount(v string) {
	o.OrderAmount = v
}

// GetOrderCurrency returns the OrderCurrency field value
func (o *ChargeResponse) GetOrderCurrency() CurrencyResponse {
	if o == nil {
		var ret CurrencyResponse
		return ret
	}

	return o.OrderCurrency
}

// GetOrderCurrencyOk returns a tuple with the OrderCurrency field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetOrderCurrencyOk() (*CurrencyResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderCurrency, true
}

// SetOrderCurrency sets field value
func (o *ChargeResponse) SetOrderCurrency(v CurrencyResponse) {
	o.OrderCurrency = v
}

// GetFee returns the Fee field value
func (o *ChargeResponse) GetFee() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Fee
}

// GetFeeOk returns a tuple with the Fee field value
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetFeeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Fee, true
}

// SetFee sets field value
func (o *ChargeResponse) SetFee(v string) {
	o.Fee = v
}

// GetMeta returns the Meta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeResponse) GetMeta() ChargeMetaOutput {
	if o == nil || IsNil(o.Meta.Get()) {
		var ret ChargeMetaOutput
		return ret
	}
	return *o.Meta.Get()
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeResponse) GetMetaOk() (*ChargeMetaOutput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Meta.Get(), o.Meta.IsSet()
}

// HasMeta returns a boolean if a field has been set.
func (o *ChargeResponse) HasMeta() bool {
	if o != nil && o.Meta.IsSet() {
		return true
	}

	return false
}

// SetMeta gets a reference to the given NullableChargeMetaOutput and assigns it to the Meta field.
func (o *ChargeResponse) SetMeta(v ChargeMetaOutput) {
	o.Meta.Set(&v)
}
// SetMetaNil sets the value for Meta to be an explicit nil
func (o *ChargeResponse) SetMetaNil() {
	o.Meta.Set(nil)
}

// UnsetMeta ensures that no value is present for Meta, not even an explicit nil
func (o *ChargeResponse) UnsetMeta() {
	o.Meta.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ChargeResponse) GetStatus() ChargeStatus {
	if o == nil || IsNil(o.Status) {
		var ret ChargeStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeResponse) GetStatusOk() (*ChargeStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ChargeResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ChargeStatus and assigns it to the Status field.
func (o *ChargeResponse) SetStatus(v ChargeStatus) {
	o.Status = &v
}

// GetSettlementAmount returns the SettlementAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeResponse) GetSettlementAmount() string {
	if o == nil || IsNil(o.SettlementAmount.Get()) {
		var ret string
		return ret
	}
	return *o.SettlementAmount.Get()
}

// GetSettlementAmountOk returns a tuple with the SettlementAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeResponse) GetSettlementAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SettlementAmount.Get(), o.SettlementAmount.IsSet()
}

// HasSettlementAmount returns a boolean if a field has been set.
func (o *ChargeResponse) HasSettlementAmount() bool {
	if o != nil && o.SettlementAmount.IsSet() {
		return true
	}

	return false
}

// SetSettlementAmount gets a reference to the given NullableString and assigns it to the SettlementAmount field.
func (o *ChargeResponse) SetSettlementAmount(v string) {
	o.SettlementAmount.Set(&v)
}
// SetSettlementAmountNil sets the value for SettlementAmount to be an explicit nil
func (o *ChargeResponse) SetSettlementAmountNil() {
	o.SettlementAmount.Set(nil)
}

// UnsetSettlementAmount ensures that no value is present for SettlementAmount, not even an explicit nil
func (o *ChargeResponse) UnsetSettlementAmount() {
	o.SettlementAmount.Unset()
}

func (o ChargeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UpdatedAt.IsSet() {
		toSerialize["updated_at"] = o.UpdatedAt.Get()
	}
	toSerialize["id"] = o.Id
	if o.SubMerchantUid.IsSet() {
		toSerialize["sub_merchant_uid"] = o.SubMerchantUid.Get()
	}
	toSerialize["order_id"] = o.OrderId
	toSerialize["order_amount"] = o.OrderAmount
	toSerialize["order_currency"] = o.OrderCurrency
	toSerialize["fee"] = o.Fee
	if o.Meta.IsSet() {
		toSerialize["meta"] = o.Meta.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.SettlementAmount.IsSet() {
		toSerialize["settlement_amount"] = o.SettlementAmount.Get()
	}
	return toSerialize, nil
}

func (o *ChargeResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"order_id",
		"order_amount",
		"order_currency",
		"fee",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeResponse := _ChargeResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeResponse)

	if err != nil {
		return err
	}

	*o = ChargeResponse(varChargeResponse)

	return err
}

type NullableChargeResponse struct {
	value *ChargeResponse
	isSet bool
}

func (v NullableChargeResponse) Get() *ChargeResponse {
	return v.value
}

func (v *NullableChargeResponse) Set(val *ChargeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeResponse(val *ChargeResponse) *NullableChargeResponse {
	return &NullableChargeResponse{value: val, isSet: true}
}

func (v NullableChargeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


