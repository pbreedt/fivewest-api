/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"fmt"
)

// ShippingAddressType the model 'ShippingAddressType'
type ShippingAddressType string

// List of ShippingAddressType
const (
	SHIPPINGADDRESSTYPE__01 ShippingAddressType = "01"
	SHIPPINGADDRESSTYPE__02 ShippingAddressType = "02"
	SHIPPINGADDRESSTYPE__03 ShippingAddressType = "03"
	SHIPPINGADDRESSTYPE__04 ShippingAddressType = "04"
)

// All allowed values of ShippingAddressType enum
var AllowedShippingAddressTypeEnumValues = []ShippingAddressType{
	"01",
	"02",
	"03",
	"04",
}

func (v *ShippingAddressType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShippingAddressType(value)
	for _, existing := range AllowedShippingAddressTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShippingAddressType", value)
}

// NewShippingAddressTypeFromValue returns a pointer to a valid ShippingAddressType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShippingAddressTypeFromValue(v string) (*ShippingAddressType, error) {
	ev := ShippingAddressType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShippingAddressType: valid values are %v", v, AllowedShippingAddressTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShippingAddressType) IsValid() bool {
	for _, existing := range AllowedShippingAddressTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShippingAddressType value
func (v ShippingAddressType) Ptr() *ShippingAddressType {
	return &v
}

type NullableShippingAddressType struct {
	value *ShippingAddressType
	isSet bool
}

func (v NullableShippingAddressType) Get() *ShippingAddressType {
	return v.value
}

func (v *NullableShippingAddressType) Set(val *ShippingAddressType) {
	v.value = val
	v.isSet = true
}

func (v NullableShippingAddressType) IsSet() bool {
	return v.isSet
}

func (v *NullableShippingAddressType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShippingAddressType(val *ShippingAddressType) *NullableShippingAddressType {
	return &NullableShippingAddressType{value: val, isSet: true}
}

func (v NullableShippingAddressType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShippingAddressType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

