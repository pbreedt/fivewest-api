/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ShippingAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShippingAddress{}

// ShippingAddress struct for ShippingAddress
type ShippingAddress struct {
	Region string `json:"region"`
	State NullableString `json:"state,omitempty"`
	City NullableString `json:"city,omitempty"`
	Address NullableString `json:"address,omitempty"`
	ZipCode NullableString `json:"zip_code,omitempty"`
	ShippingAddressType NullableShippingAddressType `json:"shipping_address_type,omitempty"`
}

type _ShippingAddress ShippingAddress

// NewShippingAddress instantiates a new ShippingAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShippingAddress(region string) *ShippingAddress {
	this := ShippingAddress{}
	this.Region = region
	return &this
}

// NewShippingAddressWithDefaults instantiates a new ShippingAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShippingAddressWithDefaults() *ShippingAddress {
	this := ShippingAddress{}
	return &this
}

// GetRegion returns the Region field value
func (o *ShippingAddress) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *ShippingAddress) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *ShippingAddress) SetRegion(v string) {
	o.Region = v
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShippingAddress) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShippingAddress) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *ShippingAddress) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *ShippingAddress) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *ShippingAddress) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *ShippingAddress) UnsetState() {
	o.State.Unset()
}

// GetCity returns the City field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShippingAddress) GetCity() string {
	if o == nil || IsNil(o.City.Get()) {
		var ret string
		return ret
	}
	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShippingAddress) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// HasCity returns a boolean if a field has been set.
func (o *ShippingAddress) HasCity() bool {
	if o != nil && o.City.IsSet() {
		return true
	}

	return false
}

// SetCity gets a reference to the given NullableString and assigns it to the City field.
func (o *ShippingAddress) SetCity(v string) {
	o.City.Set(&v)
}
// SetCityNil sets the value for City to be an explicit nil
func (o *ShippingAddress) SetCityNil() {
	o.City.Set(nil)
}

// UnsetCity ensures that no value is present for City, not even an explicit nil
func (o *ShippingAddress) UnsetCity() {
	o.City.Unset()
}

// GetAddress returns the Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShippingAddress) GetAddress() string {
	if o == nil || IsNil(o.Address.Get()) {
		var ret string
		return ret
	}
	return *o.Address.Get()
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShippingAddress) GetAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Address.Get(), o.Address.IsSet()
}

// HasAddress returns a boolean if a field has been set.
func (o *ShippingAddress) HasAddress() bool {
	if o != nil && o.Address.IsSet() {
		return true
	}

	return false
}

// SetAddress gets a reference to the given NullableString and assigns it to the Address field.
func (o *ShippingAddress) SetAddress(v string) {
	o.Address.Set(&v)
}
// SetAddressNil sets the value for Address to be an explicit nil
func (o *ShippingAddress) SetAddressNil() {
	o.Address.Set(nil)
}

// UnsetAddress ensures that no value is present for Address, not even an explicit nil
func (o *ShippingAddress) UnsetAddress() {
	o.Address.Unset()
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShippingAddress) GetZipCode() string {
	if o == nil || IsNil(o.ZipCode.Get()) {
		var ret string
		return ret
	}
	return *o.ZipCode.Get()
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShippingAddress) GetZipCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZipCode.Get(), o.ZipCode.IsSet()
}

// HasZipCode returns a boolean if a field has been set.
func (o *ShippingAddress) HasZipCode() bool {
	if o != nil && o.ZipCode.IsSet() {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given NullableString and assigns it to the ZipCode field.
func (o *ShippingAddress) SetZipCode(v string) {
	o.ZipCode.Set(&v)
}
// SetZipCodeNil sets the value for ZipCode to be an explicit nil
func (o *ShippingAddress) SetZipCodeNil() {
	o.ZipCode.Set(nil)
}

// UnsetZipCode ensures that no value is present for ZipCode, not even an explicit nil
func (o *ShippingAddress) UnsetZipCode() {
	o.ZipCode.Unset()
}

// GetShippingAddressType returns the ShippingAddressType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ShippingAddress) GetShippingAddressType() ShippingAddressType {
	if o == nil || IsNil(o.ShippingAddressType.Get()) {
		var ret ShippingAddressType
		return ret
	}
	return *o.ShippingAddressType.Get()
}

// GetShippingAddressTypeOk returns a tuple with the ShippingAddressType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ShippingAddress) GetShippingAddressTypeOk() (*ShippingAddressType, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShippingAddressType.Get(), o.ShippingAddressType.IsSet()
}

// HasShippingAddressType returns a boolean if a field has been set.
func (o *ShippingAddress) HasShippingAddressType() bool {
	if o != nil && o.ShippingAddressType.IsSet() {
		return true
	}

	return false
}

// SetShippingAddressType gets a reference to the given NullableShippingAddressType and assigns it to the ShippingAddressType field.
func (o *ShippingAddress) SetShippingAddressType(v ShippingAddressType) {
	o.ShippingAddressType.Set(&v)
}
// SetShippingAddressTypeNil sets the value for ShippingAddressType to be an explicit nil
func (o *ShippingAddress) SetShippingAddressTypeNil() {
	o.ShippingAddressType.Set(nil)
}

// UnsetShippingAddressType ensures that no value is present for ShippingAddressType, not even an explicit nil
func (o *ShippingAddress) UnsetShippingAddressType() {
	o.ShippingAddressType.Unset()
}

func (o ShippingAddress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShippingAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["region"] = o.Region
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.City.IsSet() {
		toSerialize["city"] = o.City.Get()
	}
	if o.Address.IsSet() {
		toSerialize["address"] = o.Address.Get()
	}
	if o.ZipCode.IsSet() {
		toSerialize["zip_code"] = o.ZipCode.Get()
	}
	if o.ShippingAddressType.IsSet() {
		toSerialize["shipping_address_type"] = o.ShippingAddressType.Get()
	}
	return toSerialize, nil
}

func (o *ShippingAddress) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShippingAddress := _ShippingAddress{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShippingAddress)

	if err != nil {
		return err
	}

	*o = ShippingAddress(varShippingAddress)

	return err
}

type NullableShippingAddress struct {
	value *ShippingAddress
	isSet bool
}

func (v NullableShippingAddress) Get() *ShippingAddress {
	return v.value
}

func (v *NullableShippingAddress) Set(val *ShippingAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableShippingAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableShippingAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShippingAddress(val *ShippingAddress) *NullableShippingAddress {
	return &NullableShippingAddress{value: val, isSet: true}
}

func (v NullableShippingAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShippingAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


