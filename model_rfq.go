/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Rfq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rfq{}

// Rfq struct for Rfq
type Rfq struct {
	Uid string `json:"uid"`
	Rate float32 `json:"rate"`
	TradeId *string `json:"trade_id,omitempty"`
	PairId *string `json:"pair_id,omitempty"`
	Pair PairBaseClient `json:"pair"`
	BaseAmount float32 `json:"base_amount"`
	QuoteAmount float32 `json:"quote_amount"`
	Side TradeSide `json:"side"`
	Status QuoteStatus `json:"status"`
	QuoteLifetimeSeconds int32 `json:"quote_lifetime_seconds"`
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
}

type _Rfq Rfq

// NewRfq instantiates a new Rfq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRfq(uid string, rate float32, pair PairBaseClient, baseAmount float32, quoteAmount float32, side TradeSide, status QuoteStatus, quoteLifetimeSeconds int32, id string, createdAt time.Time) *Rfq {
	this := Rfq{}
	this.Uid = uid
	this.Rate = rate
	this.Pair = pair
	this.BaseAmount = baseAmount
	this.QuoteAmount = quoteAmount
	this.Side = side
	this.Status = status
	this.QuoteLifetimeSeconds = quoteLifetimeSeconds
	this.Id = id
	this.CreatedAt = createdAt
	return &this
}

// NewRfqWithDefaults instantiates a new Rfq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRfqWithDefaults() *Rfq {
	this := Rfq{}
	return &this
}

// GetUid returns the Uid field value
func (o *Rfq) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *Rfq) SetUid(v string) {
	o.Uid = v
}

// GetRate returns the Rate field value
func (o *Rfq) GetRate() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetRateOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rate, true
}

// SetRate sets field value
func (o *Rfq) SetRate(v float32) {
	o.Rate = v
}

// GetTradeId returns the TradeId field value if set, zero value otherwise.
func (o *Rfq) GetTradeId() string {
	if o == nil || IsNil(o.TradeId) {
		var ret string
		return ret
	}
	return *o.TradeId
}

// GetTradeIdOk returns a tuple with the TradeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rfq) GetTradeIdOk() (*string, bool) {
	if o == nil || IsNil(o.TradeId) {
		return nil, false
	}
	return o.TradeId, true
}

// HasTradeId returns a boolean if a field has been set.
func (o *Rfq) HasTradeId() bool {
	if o != nil && !IsNil(o.TradeId) {
		return true
	}

	return false
}

// SetTradeId gets a reference to the given string and assigns it to the TradeId field.
func (o *Rfq) SetTradeId(v string) {
	o.TradeId = &v
}

// GetPairId returns the PairId field value if set, zero value otherwise.
func (o *Rfq) GetPairId() string {
	if o == nil || IsNil(o.PairId) {
		var ret string
		return ret
	}
	return *o.PairId
}

// GetPairIdOk returns a tuple with the PairId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rfq) GetPairIdOk() (*string, bool) {
	if o == nil || IsNil(o.PairId) {
		return nil, false
	}
	return o.PairId, true
}

// HasPairId returns a boolean if a field has been set.
func (o *Rfq) HasPairId() bool {
	if o != nil && !IsNil(o.PairId) {
		return true
	}

	return false
}

// SetPairId gets a reference to the given string and assigns it to the PairId field.
func (o *Rfq) SetPairId(v string) {
	o.PairId = &v
}

// GetPair returns the Pair field value
func (o *Rfq) GetPair() PairBaseClient {
	if o == nil {
		var ret PairBaseClient
		return ret
	}

	return o.Pair
}

// GetPairOk returns a tuple with the Pair field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetPairOk() (*PairBaseClient, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pair, true
}

// SetPair sets field value
func (o *Rfq) SetPair(v PairBaseClient) {
	o.Pair = v
}

// GetBaseAmount returns the BaseAmount field value
func (o *Rfq) GetBaseAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.BaseAmount
}

// GetBaseAmountOk returns a tuple with the BaseAmount field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetBaseAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseAmount, true
}

// SetBaseAmount sets field value
func (o *Rfq) SetBaseAmount(v float32) {
	o.BaseAmount = v
}

// GetQuoteAmount returns the QuoteAmount field value
func (o *Rfq) GetQuoteAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.QuoteAmount
}

// GetQuoteAmountOk returns a tuple with the QuoteAmount field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetQuoteAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteAmount, true
}

// SetQuoteAmount sets field value
func (o *Rfq) SetQuoteAmount(v float32) {
	o.QuoteAmount = v
}

// GetSide returns the Side field value
func (o *Rfq) GetSide() TradeSide {
	if o == nil {
		var ret TradeSide
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetSideOk() (*TradeSide, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *Rfq) SetSide(v TradeSide) {
	o.Side = v
}

// GetStatus returns the Status field value
func (o *Rfq) GetStatus() QuoteStatus {
	if o == nil {
		var ret QuoteStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetStatusOk() (*QuoteStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Rfq) SetStatus(v QuoteStatus) {
	o.Status = v
}

// GetQuoteLifetimeSeconds returns the QuoteLifetimeSeconds field value
func (o *Rfq) GetQuoteLifetimeSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.QuoteLifetimeSeconds
}

// GetQuoteLifetimeSecondsOk returns a tuple with the QuoteLifetimeSeconds field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetQuoteLifetimeSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteLifetimeSeconds, true
}

// SetQuoteLifetimeSeconds sets field value
func (o *Rfq) SetQuoteLifetimeSeconds(v int32) {
	o.QuoteLifetimeSeconds = v
}

// GetId returns the Id field value
func (o *Rfq) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Rfq) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Rfq) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Rfq) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Rfq) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o Rfq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rfq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["uid"] = o.Uid
	toSerialize["rate"] = o.Rate
	if !IsNil(o.TradeId) {
		toSerialize["trade_id"] = o.TradeId
	}
	if !IsNil(o.PairId) {
		toSerialize["pair_id"] = o.PairId
	}
	toSerialize["pair"] = o.Pair
	toSerialize["base_amount"] = o.BaseAmount
	toSerialize["quote_amount"] = o.QuoteAmount
	toSerialize["side"] = o.Side
	toSerialize["status"] = o.Status
	toSerialize["quote_lifetime_seconds"] = o.QuoteLifetimeSeconds
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *Rfq) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uid",
		"rate",
		"pair",
		"base_amount",
		"quote_amount",
		"side",
		"status",
		"quote_lifetime_seconds",
		"id",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRfq := _Rfq{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRfq)

	if err != nil {
		return err
	}

	*o = Rfq(varRfq)

	return err
}

type NullableRfq struct {
	value *Rfq
	isSet bool
}

func (v NullableRfq) Get() *Rfq {
	return v.value
}

func (v *NullableRfq) Set(val *Rfq) {
	v.value = val
	v.isSet = true
}

func (v NullableRfq) IsSet() bool {
	return v.isSet
}

func (v *NullableRfq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRfq(val *Rfq) *NullableRfq {
	return &NullableRfq{value: val, isSet: true}
}

func (v NullableRfq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRfq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


