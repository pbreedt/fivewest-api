/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PairInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PairInfo{}

// PairInfo struct for PairInfo
type PairInfo struct {
	BaseCurrency string `json:"base_currency"`
	QuoteCurrency string `json:"quote_currency"`
	MinSizeQuoteAmount float32 `json:"min_size_quote_amount"`
	MaxSizeQuoteAmount float32 `json:"max_size_quote_amount"`
	RfqDailyLimitQuoteAmount float32 `json:"rfq_daily_limit_quote_amount"`
	IsActive bool `json:"is_active"`
	QuoteLifetimeSeconds int32 `json:"quote_lifetime_seconds"`
}

type _PairInfo PairInfo

// NewPairInfo instantiates a new PairInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPairInfo(baseCurrency string, quoteCurrency string, minSizeQuoteAmount float32, maxSizeQuoteAmount float32, rfqDailyLimitQuoteAmount float32, isActive bool, quoteLifetimeSeconds int32) *PairInfo {
	this := PairInfo{}
	this.BaseCurrency = baseCurrency
	this.QuoteCurrency = quoteCurrency
	this.MinSizeQuoteAmount = minSizeQuoteAmount
	this.MaxSizeQuoteAmount = maxSizeQuoteAmount
	this.RfqDailyLimitQuoteAmount = rfqDailyLimitQuoteAmount
	this.IsActive = isActive
	this.QuoteLifetimeSeconds = quoteLifetimeSeconds
	return &this
}

// NewPairInfoWithDefaults instantiates a new PairInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPairInfoWithDefaults() *PairInfo {
	this := PairInfo{}
	return &this
}

// GetBaseCurrency returns the BaseCurrency field value
func (o *PairInfo) GetBaseCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BaseCurrency
}

// GetBaseCurrencyOk returns a tuple with the BaseCurrency field value
// and a boolean to check if the value has been set.
func (o *PairInfo) GetBaseCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BaseCurrency, true
}

// SetBaseCurrency sets field value
func (o *PairInfo) SetBaseCurrency(v string) {
	o.BaseCurrency = v
}

// GetQuoteCurrency returns the QuoteCurrency field value
func (o *PairInfo) GetQuoteCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QuoteCurrency
}

// GetQuoteCurrencyOk returns a tuple with the QuoteCurrency field value
// and a boolean to check if the value has been set.
func (o *PairInfo) GetQuoteCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteCurrency, true
}

// SetQuoteCurrency sets field value
func (o *PairInfo) SetQuoteCurrency(v string) {
	o.QuoteCurrency = v
}

// GetMinSizeQuoteAmount returns the MinSizeQuoteAmount field value
func (o *PairInfo) GetMinSizeQuoteAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MinSizeQuoteAmount
}

// GetMinSizeQuoteAmountOk returns a tuple with the MinSizeQuoteAmount field value
// and a boolean to check if the value has been set.
func (o *PairInfo) GetMinSizeQuoteAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinSizeQuoteAmount, true
}

// SetMinSizeQuoteAmount sets field value
func (o *PairInfo) SetMinSizeQuoteAmount(v float32) {
	o.MinSizeQuoteAmount = v
}

// GetMaxSizeQuoteAmount returns the MaxSizeQuoteAmount field value
func (o *PairInfo) GetMaxSizeQuoteAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.MaxSizeQuoteAmount
}

// GetMaxSizeQuoteAmountOk returns a tuple with the MaxSizeQuoteAmount field value
// and a boolean to check if the value has been set.
func (o *PairInfo) GetMaxSizeQuoteAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSizeQuoteAmount, true
}

// SetMaxSizeQuoteAmount sets field value
func (o *PairInfo) SetMaxSizeQuoteAmount(v float32) {
	o.MaxSizeQuoteAmount = v
}

// GetRfqDailyLimitQuoteAmount returns the RfqDailyLimitQuoteAmount field value
func (o *PairInfo) GetRfqDailyLimitQuoteAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.RfqDailyLimitQuoteAmount
}

// GetRfqDailyLimitQuoteAmountOk returns a tuple with the RfqDailyLimitQuoteAmount field value
// and a boolean to check if the value has been set.
func (o *PairInfo) GetRfqDailyLimitQuoteAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RfqDailyLimitQuoteAmount, true
}

// SetRfqDailyLimitQuoteAmount sets field value
func (o *PairInfo) SetRfqDailyLimitQuoteAmount(v float32) {
	o.RfqDailyLimitQuoteAmount = v
}

// GetIsActive returns the IsActive field value
func (o *PairInfo) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *PairInfo) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *PairInfo) SetIsActive(v bool) {
	o.IsActive = v
}

// GetQuoteLifetimeSeconds returns the QuoteLifetimeSeconds field value
func (o *PairInfo) GetQuoteLifetimeSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.QuoteLifetimeSeconds
}

// GetQuoteLifetimeSecondsOk returns a tuple with the QuoteLifetimeSeconds field value
// and a boolean to check if the value has been set.
func (o *PairInfo) GetQuoteLifetimeSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.QuoteLifetimeSeconds, true
}

// SetQuoteLifetimeSeconds sets field value
func (o *PairInfo) SetQuoteLifetimeSeconds(v int32) {
	o.QuoteLifetimeSeconds = v
}

func (o PairInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PairInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["base_currency"] = o.BaseCurrency
	toSerialize["quote_currency"] = o.QuoteCurrency
	toSerialize["min_size_quote_amount"] = o.MinSizeQuoteAmount
	toSerialize["max_size_quote_amount"] = o.MaxSizeQuoteAmount
	toSerialize["rfq_daily_limit_quote_amount"] = o.RfqDailyLimitQuoteAmount
	toSerialize["is_active"] = o.IsActive
	toSerialize["quote_lifetime_seconds"] = o.QuoteLifetimeSeconds
	return toSerialize, nil
}

func (o *PairInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"base_currency",
		"quote_currency",
		"min_size_quote_amount",
		"max_size_quote_amount",
		"rfq_daily_limit_quote_amount",
		"is_active",
		"quote_lifetime_seconds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPairInfo := _PairInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPairInfo)

	if err != nil {
		return err
	}

	*o = PairInfo(varPairInfo)

	return err
}

type NullablePairInfo struct {
	value *PairInfo
	isSet bool
}

func (v NullablePairInfo) Get() *PairInfo {
	return v.value
}

func (v *NullablePairInfo) Set(val *PairInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePairInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePairInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePairInfo(val *PairInfo) *NullablePairInfo {
	return &NullablePairInfo{value: val, isSet: true}
}

func (v NullablePairInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePairInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


