/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChargeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeData{}

// ChargeData struct for ChargeData
type ChargeData struct {
	SubMerchantUid NullableString `json:"sub_merchant_uid,omitempty"`
	OrderAmount OrderAmount `json:"order_amount"`
	OrderId *string `json:"order_id,omitempty"`
	Meta NullableChargeMetaInput `json:"meta,omitempty"`
	OrderCurrencyId NullableString `json:"order_currency_id,omitempty"`
	Symbol NullableString `json:"symbol,omitempty"`
}

type _ChargeData ChargeData

// NewChargeData instantiates a new ChargeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeData(orderAmount OrderAmount) *ChargeData {
	this := ChargeData{}
	this.OrderAmount = orderAmount
	return &this
}

// NewChargeDataWithDefaults instantiates a new ChargeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeDataWithDefaults() *ChargeData {
	this := ChargeData{}
	return &this
}

// GetSubMerchantUid returns the SubMerchantUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeData) GetSubMerchantUid() string {
	if o == nil || IsNil(o.SubMerchantUid.Get()) {
		var ret string
		return ret
	}
	return *o.SubMerchantUid.Get()
}

// GetSubMerchantUidOk returns a tuple with the SubMerchantUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeData) GetSubMerchantUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubMerchantUid.Get(), o.SubMerchantUid.IsSet()
}

// HasSubMerchantUid returns a boolean if a field has been set.
func (o *ChargeData) HasSubMerchantUid() bool {
	if o != nil && o.SubMerchantUid.IsSet() {
		return true
	}

	return false
}

// SetSubMerchantUid gets a reference to the given NullableString and assigns it to the SubMerchantUid field.
func (o *ChargeData) SetSubMerchantUid(v string) {
	o.SubMerchantUid.Set(&v)
}
// SetSubMerchantUidNil sets the value for SubMerchantUid to be an explicit nil
func (o *ChargeData) SetSubMerchantUidNil() {
	o.SubMerchantUid.Set(nil)
}

// UnsetSubMerchantUid ensures that no value is present for SubMerchantUid, not even an explicit nil
func (o *ChargeData) UnsetSubMerchantUid() {
	o.SubMerchantUid.Unset()
}

// GetOrderAmount returns the OrderAmount field value
func (o *ChargeData) GetOrderAmount() OrderAmount {
	if o == nil {
		var ret OrderAmount
		return ret
	}

	return o.OrderAmount
}

// GetOrderAmountOk returns a tuple with the OrderAmount field value
// and a boolean to check if the value has been set.
func (o *ChargeData) GetOrderAmountOk() (*OrderAmount, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderAmount, true
}

// SetOrderAmount sets field value
func (o *ChargeData) SetOrderAmount(v OrderAmount) {
	o.OrderAmount = v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *ChargeData) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeData) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *ChargeData) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *ChargeData) SetOrderId(v string) {
	o.OrderId = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeData) GetMeta() ChargeMetaInput {
	if o == nil || IsNil(o.Meta.Get()) {
		var ret ChargeMetaInput
		return ret
	}
	return *o.Meta.Get()
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeData) GetMetaOk() (*ChargeMetaInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Meta.Get(), o.Meta.IsSet()
}

// HasMeta returns a boolean if a field has been set.
func (o *ChargeData) HasMeta() bool {
	if o != nil && o.Meta.IsSet() {
		return true
	}

	return false
}

// SetMeta gets a reference to the given NullableChargeMetaInput and assigns it to the Meta field.
func (o *ChargeData) SetMeta(v ChargeMetaInput) {
	o.Meta.Set(&v)
}
// SetMetaNil sets the value for Meta to be an explicit nil
func (o *ChargeData) SetMetaNil() {
	o.Meta.Set(nil)
}

// UnsetMeta ensures that no value is present for Meta, not even an explicit nil
func (o *ChargeData) UnsetMeta() {
	o.Meta.Unset()
}

// GetOrderCurrencyId returns the OrderCurrencyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeData) GetOrderCurrencyId() string {
	if o == nil || IsNil(o.OrderCurrencyId.Get()) {
		var ret string
		return ret
	}
	return *o.OrderCurrencyId.Get()
}

// GetOrderCurrencyIdOk returns a tuple with the OrderCurrencyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeData) GetOrderCurrencyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrderCurrencyId.Get(), o.OrderCurrencyId.IsSet()
}

// HasOrderCurrencyId returns a boolean if a field has been set.
func (o *ChargeData) HasOrderCurrencyId() bool {
	if o != nil && o.OrderCurrencyId.IsSet() {
		return true
	}

	return false
}

// SetOrderCurrencyId gets a reference to the given NullableString and assigns it to the OrderCurrencyId field.
func (o *ChargeData) SetOrderCurrencyId(v string) {
	o.OrderCurrencyId.Set(&v)
}
// SetOrderCurrencyIdNil sets the value for OrderCurrencyId to be an explicit nil
func (o *ChargeData) SetOrderCurrencyIdNil() {
	o.OrderCurrencyId.Set(nil)
}

// UnsetOrderCurrencyId ensures that no value is present for OrderCurrencyId, not even an explicit nil
func (o *ChargeData) UnsetOrderCurrencyId() {
	o.OrderCurrencyId.Unset()
}

// GetSymbol returns the Symbol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeData) GetSymbol() string {
	if o == nil || IsNil(o.Symbol.Get()) {
		var ret string
		return ret
	}
	return *o.Symbol.Get()
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeData) GetSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Symbol.Get(), o.Symbol.IsSet()
}

// HasSymbol returns a boolean if a field has been set.
func (o *ChargeData) HasSymbol() bool {
	if o != nil && o.Symbol.IsSet() {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given NullableString and assigns it to the Symbol field.
func (o *ChargeData) SetSymbol(v string) {
	o.Symbol.Set(&v)
}
// SetSymbolNil sets the value for Symbol to be an explicit nil
func (o *ChargeData) SetSymbolNil() {
	o.Symbol.Set(nil)
}

// UnsetSymbol ensures that no value is present for Symbol, not even an explicit nil
func (o *ChargeData) UnsetSymbol() {
	o.Symbol.Unset()
}

func (o ChargeData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SubMerchantUid.IsSet() {
		toSerialize["sub_merchant_uid"] = o.SubMerchantUid.Get()
	}
	toSerialize["order_amount"] = o.OrderAmount
	if !IsNil(o.OrderId) {
		toSerialize["order_id"] = o.OrderId
	}
	if o.Meta.IsSet() {
		toSerialize["meta"] = o.Meta.Get()
	}
	if o.OrderCurrencyId.IsSet() {
		toSerialize["order_currency_id"] = o.OrderCurrencyId.Get()
	}
	if o.Symbol.IsSet() {
		toSerialize["symbol"] = o.Symbol.Get()
	}
	return toSerialize, nil
}

func (o *ChargeData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"order_amount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargeData := _ChargeData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargeData)

	if err != nil {
		return err
	}

	*o = ChargeData(varChargeData)

	return err
}

type NullableChargeData struct {
	value *ChargeData
	isSet bool
}

func (v NullableChargeData) Get() *ChargeData {
	return v.value
}

func (v *NullableChargeData) Set(val *ChargeData) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeData) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeData(val *ChargeData) *NullableChargeData {
	return &NullableChargeData{value: val, isSet: true}
}

func (v NullableChargeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


