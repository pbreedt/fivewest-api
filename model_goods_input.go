/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GoodsInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoodsInput{}

// GoodsInput struct for GoodsInput
type GoodsInput struct {
	GoodsType GoodsType `json:"goods_type"`
	GoodsCategory GoodsCategory `json:"goods_category"`
	ReferenceGoodsId *string `json:"reference_goods_id,omitempty"`
	GoodsName string `json:"goods_name"`
	GoodsDetail NullableString `json:"goods_detail,omitempty"`
	GoodsUnitAmount NullableGoodsUnitAmountInput `json:"goods_unit_amount,omitempty"`
}

type _GoodsInput GoodsInput

// NewGoodsInput instantiates a new GoodsInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoodsInput(goodsType GoodsType, goodsCategory GoodsCategory, goodsName string) *GoodsInput {
	this := GoodsInput{}
	this.GoodsType = goodsType
	this.GoodsCategory = goodsCategory
	this.GoodsName = goodsName
	return &this
}

// NewGoodsInputWithDefaults instantiates a new GoodsInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoodsInputWithDefaults() *GoodsInput {
	this := GoodsInput{}
	return &this
}

// GetGoodsType returns the GoodsType field value
func (o *GoodsInput) GetGoodsType() GoodsType {
	if o == nil {
		var ret GoodsType
		return ret
	}

	return o.GoodsType
}

// GetGoodsTypeOk returns a tuple with the GoodsType field value
// and a boolean to check if the value has been set.
func (o *GoodsInput) GetGoodsTypeOk() (*GoodsType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoodsType, true
}

// SetGoodsType sets field value
func (o *GoodsInput) SetGoodsType(v GoodsType) {
	o.GoodsType = v
}

// GetGoodsCategory returns the GoodsCategory field value
func (o *GoodsInput) GetGoodsCategory() GoodsCategory {
	if o == nil {
		var ret GoodsCategory
		return ret
	}

	return o.GoodsCategory
}

// GetGoodsCategoryOk returns a tuple with the GoodsCategory field value
// and a boolean to check if the value has been set.
func (o *GoodsInput) GetGoodsCategoryOk() (*GoodsCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoodsCategory, true
}

// SetGoodsCategory sets field value
func (o *GoodsInput) SetGoodsCategory(v GoodsCategory) {
	o.GoodsCategory = v
}

// GetReferenceGoodsId returns the ReferenceGoodsId field value if set, zero value otherwise.
func (o *GoodsInput) GetReferenceGoodsId() string {
	if o == nil || IsNil(o.ReferenceGoodsId) {
		var ret string
		return ret
	}
	return *o.ReferenceGoodsId
}

// GetReferenceGoodsIdOk returns a tuple with the ReferenceGoodsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoodsInput) GetReferenceGoodsIdOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceGoodsId) {
		return nil, false
	}
	return o.ReferenceGoodsId, true
}

// HasReferenceGoodsId returns a boolean if a field has been set.
func (o *GoodsInput) HasReferenceGoodsId() bool {
	if o != nil && !IsNil(o.ReferenceGoodsId) {
		return true
	}

	return false
}

// SetReferenceGoodsId gets a reference to the given string and assigns it to the ReferenceGoodsId field.
func (o *GoodsInput) SetReferenceGoodsId(v string) {
	o.ReferenceGoodsId = &v
}

// GetGoodsName returns the GoodsName field value
func (o *GoodsInput) GetGoodsName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GoodsName
}

// GetGoodsNameOk returns a tuple with the GoodsName field value
// and a boolean to check if the value has been set.
func (o *GoodsInput) GetGoodsNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GoodsName, true
}

// SetGoodsName sets field value
func (o *GoodsInput) SetGoodsName(v string) {
	o.GoodsName = v
}

// GetGoodsDetail returns the GoodsDetail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GoodsInput) GetGoodsDetail() string {
	if o == nil || IsNil(o.GoodsDetail.Get()) {
		var ret string
		return ret
	}
	return *o.GoodsDetail.Get()
}

// GetGoodsDetailOk returns a tuple with the GoodsDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoodsInput) GetGoodsDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GoodsDetail.Get(), o.GoodsDetail.IsSet()
}

// HasGoodsDetail returns a boolean if a field has been set.
func (o *GoodsInput) HasGoodsDetail() bool {
	if o != nil && o.GoodsDetail.IsSet() {
		return true
	}

	return false
}

// SetGoodsDetail gets a reference to the given NullableString and assigns it to the GoodsDetail field.
func (o *GoodsInput) SetGoodsDetail(v string) {
	o.GoodsDetail.Set(&v)
}
// SetGoodsDetailNil sets the value for GoodsDetail to be an explicit nil
func (o *GoodsInput) SetGoodsDetailNil() {
	o.GoodsDetail.Set(nil)
}

// UnsetGoodsDetail ensures that no value is present for GoodsDetail, not even an explicit nil
func (o *GoodsInput) UnsetGoodsDetail() {
	o.GoodsDetail.Unset()
}

// GetGoodsUnitAmount returns the GoodsUnitAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GoodsInput) GetGoodsUnitAmount() GoodsUnitAmountInput {
	if o == nil || IsNil(o.GoodsUnitAmount.Get()) {
		var ret GoodsUnitAmountInput
		return ret
	}
	return *o.GoodsUnitAmount.Get()
}

// GetGoodsUnitAmountOk returns a tuple with the GoodsUnitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GoodsInput) GetGoodsUnitAmountOk() (*GoodsUnitAmountInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.GoodsUnitAmount.Get(), o.GoodsUnitAmount.IsSet()
}

// HasGoodsUnitAmount returns a boolean if a field has been set.
func (o *GoodsInput) HasGoodsUnitAmount() bool {
	if o != nil && o.GoodsUnitAmount.IsSet() {
		return true
	}

	return false
}

// SetGoodsUnitAmount gets a reference to the given NullableGoodsUnitAmountInput and assigns it to the GoodsUnitAmount field.
func (o *GoodsInput) SetGoodsUnitAmount(v GoodsUnitAmountInput) {
	o.GoodsUnitAmount.Set(&v)
}
// SetGoodsUnitAmountNil sets the value for GoodsUnitAmount to be an explicit nil
func (o *GoodsInput) SetGoodsUnitAmountNil() {
	o.GoodsUnitAmount.Set(nil)
}

// UnsetGoodsUnitAmount ensures that no value is present for GoodsUnitAmount, not even an explicit nil
func (o *GoodsInput) UnsetGoodsUnitAmount() {
	o.GoodsUnitAmount.Unset()
}

func (o GoodsInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoodsInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["goods_type"] = o.GoodsType
	toSerialize["goods_category"] = o.GoodsCategory
	if !IsNil(o.ReferenceGoodsId) {
		toSerialize["reference_goods_id"] = o.ReferenceGoodsId
	}
	toSerialize["goods_name"] = o.GoodsName
	if o.GoodsDetail.IsSet() {
		toSerialize["goods_detail"] = o.GoodsDetail.Get()
	}
	if o.GoodsUnitAmount.IsSet() {
		toSerialize["goods_unit_amount"] = o.GoodsUnitAmount.Get()
	}
	return toSerialize, nil
}

func (o *GoodsInput) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"goods_type",
		"goods_category",
		"goods_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGoodsInput := _GoodsInput{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGoodsInput)

	if err != nil {
		return err
	}

	*o = GoodsInput(varGoodsInput)

	return err
}

type NullableGoodsInput struct {
	value *GoodsInput
	isSet bool
}

func (v NullableGoodsInput) Get() *GoodsInput {
	return v.value
}

func (v *NullableGoodsInput) Set(val *GoodsInput) {
	v.value = val
	v.isSet = true
}

func (v NullableGoodsInput) IsSet() bool {
	return v.isSet
}

func (v *NullableGoodsInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoodsInput(val *GoodsInput) *NullableGoodsInput {
	return &NullableGoodsInput{value: val, isSet: true}
}

func (v NullableGoodsInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoodsInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


