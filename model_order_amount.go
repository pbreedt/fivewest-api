/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"fmt"
)

// OrderAmount struct for OrderAmount
type OrderAmount struct {
	float32 *float32
	string *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *OrderAmount) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into float32
	err = json.Unmarshal(data, &dst.float32);
	if err == nil {
		jsonfloat32, _ := json.Marshal(dst.float32)
		if string(jsonfloat32) == "{}" { // empty struct
			dst.float32 = nil
		} else {
			return nil // data stored in dst.float32, return on the first match
		}
	} else {
		dst.float32 = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string);
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(OrderAmount)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *OrderAmount) MarshalJSON() ([]byte, error) {
	if src.float32 != nil {
		return json.Marshal(&src.float32)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableOrderAmount struct {
	value *OrderAmount
	isSet bool
}

func (v NullableOrderAmount) Get() *OrderAmount {
	return v.value
}

func (v *NullableOrderAmount) Set(val *OrderAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderAmount(val *OrderAmount) *NullableOrderAmount {
	return &NullableOrderAmount{value: val, isSet: true}
}

func (v NullableOrderAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


