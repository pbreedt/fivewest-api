/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"fmt"
)

// WithdrawalRequestStatus An enumeration.
type WithdrawalRequestStatus int32

// List of WithdrawalRequestStatus
const (
	WITHDRAWALREQUESTSTATUS__0 WithdrawalRequestStatus = 0
	WITHDRAWALREQUESTSTATUS__1 WithdrawalRequestStatus = 1
	WITHDRAWALREQUESTSTATUS__2 WithdrawalRequestStatus = 2
)

// All allowed values of WithdrawalRequestStatus enum
var AllowedWithdrawalRequestStatusEnumValues = []WithdrawalRequestStatus{
	0,
	1,
	2,
}

func (v *WithdrawalRequestStatus) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WithdrawalRequestStatus(value)
	for _, existing := range AllowedWithdrawalRequestStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WithdrawalRequestStatus", value)
}

// NewWithdrawalRequestStatusFromValue returns a pointer to a valid WithdrawalRequestStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWithdrawalRequestStatusFromValue(v int32) (*WithdrawalRequestStatus, error) {
	ev := WithdrawalRequestStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WithdrawalRequestStatus: valid values are %v", v, AllowedWithdrawalRequestStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WithdrawalRequestStatus) IsValid() bool {
	for _, existing := range AllowedWithdrawalRequestStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WithdrawalRequestStatus value
func (v WithdrawalRequestStatus) Ptr() *WithdrawalRequestStatus {
	return &v
}

type NullableWithdrawalRequestStatus struct {
	value *WithdrawalRequestStatus
	isSet bool
}

func (v NullableWithdrawalRequestStatus) Get() *WithdrawalRequestStatus {
	return v.value
}

func (v *NullableWithdrawalRequestStatus) Set(val *WithdrawalRequestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableWithdrawalRequestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableWithdrawalRequestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWithdrawalRequestStatus(val *WithdrawalRequestStatus) *NullableWithdrawalRequestStatus {
	return &NullableWithdrawalRequestStatus{value: val, isSet: true}
}

func (v NullableWithdrawalRequestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWithdrawalRequestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

