/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the MarketRate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarketRate{}

// MarketRate struct for MarketRate
type MarketRate struct {
	Base string `json:"base"`
	Quote string `json:"quote"`
	Exchange string `json:"exchange"`
	Bid float32 `json:"bid"`
	Ask float32 `json:"ask"`
	GeneratedAt time.Time `json:"generated_at"`
}

type _MarketRate MarketRate

// NewMarketRate instantiates a new MarketRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarketRate(base string, quote string, exchange string, bid float32, ask float32, generatedAt time.Time) *MarketRate {
	this := MarketRate{}
	this.Base = base
	this.Quote = quote
	this.Exchange = exchange
	this.Bid = bid
	this.Ask = ask
	this.GeneratedAt = generatedAt
	return &this
}

// NewMarketRateWithDefaults instantiates a new MarketRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarketRateWithDefaults() *MarketRate {
	this := MarketRate{}
	return &this
}

// GetBase returns the Base field value
func (o *MarketRate) GetBase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Base
}

// GetBaseOk returns a tuple with the Base field value
// and a boolean to check if the value has been set.
func (o *MarketRate) GetBaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Base, true
}

// SetBase sets field value
func (o *MarketRate) SetBase(v string) {
	o.Base = v
}

// GetQuote returns the Quote field value
func (o *MarketRate) GetQuote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quote
}

// GetQuoteOk returns a tuple with the Quote field value
// and a boolean to check if the value has been set.
func (o *MarketRate) GetQuoteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Quote, true
}

// SetQuote sets field value
func (o *MarketRate) SetQuote(v string) {
	o.Quote = v
}

// GetExchange returns the Exchange field value
func (o *MarketRate) GetExchange() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Exchange
}

// GetExchangeOk returns a tuple with the Exchange field value
// and a boolean to check if the value has been set.
func (o *MarketRate) GetExchangeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Exchange, true
}

// SetExchange sets field value
func (o *MarketRate) SetExchange(v string) {
	o.Exchange = v
}

// GetBid returns the Bid field value
func (o *MarketRate) GetBid() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Bid
}

// GetBidOk returns a tuple with the Bid field value
// and a boolean to check if the value has been set.
func (o *MarketRate) GetBidOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bid, true
}

// SetBid sets field value
func (o *MarketRate) SetBid(v float32) {
	o.Bid = v
}

// GetAsk returns the Ask field value
func (o *MarketRate) GetAsk() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Ask
}

// GetAskOk returns a tuple with the Ask field value
// and a boolean to check if the value has been set.
func (o *MarketRate) GetAskOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ask, true
}

// SetAsk sets field value
func (o *MarketRate) SetAsk(v float32) {
	o.Ask = v
}

// GetGeneratedAt returns the GeneratedAt field value
func (o *MarketRate) GetGeneratedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.GeneratedAt
}

// GetGeneratedAtOk returns a tuple with the GeneratedAt field value
// and a boolean to check if the value has been set.
func (o *MarketRate) GetGeneratedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GeneratedAt, true
}

// SetGeneratedAt sets field value
func (o *MarketRate) SetGeneratedAt(v time.Time) {
	o.GeneratedAt = v
}

func (o MarketRate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarketRate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["base"] = o.Base
	toSerialize["quote"] = o.Quote
	toSerialize["exchange"] = o.Exchange
	toSerialize["bid"] = o.Bid
	toSerialize["ask"] = o.Ask
	toSerialize["generated_at"] = o.GeneratedAt
	return toSerialize, nil
}

func (o *MarketRate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"base",
		"quote",
		"exchange",
		"bid",
		"ask",
		"generated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarketRate := _MarketRate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMarketRate)

	if err != nil {
		return err
	}

	*o = MarketRate(varMarketRate)

	return err
}

type NullableMarketRate struct {
	value *MarketRate
	isSet bool
}

func (v NullableMarketRate) Get() *MarketRate {
	return v.value
}

func (v *NullableMarketRate) Set(val *MarketRate) {
	v.value = val
	v.isSet = true
}

func (v NullableMarketRate) IsSet() bool {
	return v.isSet
}

func (v *NullableMarketRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarketRate(val *MarketRate) *NullableMarketRate {
	return &NullableMarketRate{value: val, isSet: true}
}

func (v NullableMarketRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarketRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


