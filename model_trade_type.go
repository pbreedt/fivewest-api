/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"fmt"
)

// TradeType An enumeration.
type TradeType string

// List of TradeType
const (
	TRADETYPE_PTS TradeType = "pts"
	TRADETYPE_MARGIN TradeType = "margin"
	TRADETYPE_SPOT TradeType = "spot"
)

// All allowed values of TradeType enum
var AllowedTradeTypeEnumValues = []TradeType{
	"pts",
	"margin",
	"spot",
}

func (v *TradeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TradeType(value)
	for _, existing := range AllowedTradeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TradeType", value)
}

// NewTradeTypeFromValue returns a pointer to a valid TradeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTradeTypeFromValue(v string) (*TradeType, error) {
	ev := TradeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TradeType: valid values are %v", v, AllowedTradeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TradeType) IsValid() bool {
	for _, existing := range AllowedTradeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TradeType value
func (v TradeType) Ptr() *TradeType {
	return &v
}

type NullableTradeType struct {
	value *TradeType
	isSet bool
}

func (v NullableTradeType) Get() *TradeType {
	return v.value
}

func (v *NullableTradeType) Set(val *TradeType) {
	v.value = val
	v.isSet = true
}

func (v NullableTradeType) IsSet() bool {
	return v.isSet
}

func (v *NullableTradeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradeType(val *TradeType) *NullableTradeType {
	return &NullableTradeType{value: val, isSet: true}
}

func (v NullableTradeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

