/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"fmt"
)

// Exchange An enumeration.
type Exchange string

// List of Exchange
const (
	EXCHANGE_FTX Exchange = "ftx"
	EXCHANGE_BINANCE Exchange = "binance"
	EXCHANGE_LUNO Exchange = "luno"
	EXCHANGE_VALR Exchange = "valr"
	EXCHANGE_OVEX Exchange = "ovex"
	EXCHANGE_ALPHA_VANTAGE Exchange = "alpha-vantage"
)

// All allowed values of Exchange enum
var AllowedExchangeEnumValues = []Exchange{
	"ftx",
	"binance",
	"luno",
	"valr",
	"ovex",
	"alpha-vantage",
}

func (v *Exchange) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Exchange(value)
	for _, existing := range AllowedExchangeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Exchange", value)
}

// NewExchangeFromValue returns a pointer to a valid Exchange
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExchangeFromValue(v string) (*Exchange, error) {
	ev := Exchange(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Exchange: valid values are %v", v, AllowedExchangeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Exchange) IsValid() bool {
	for _, existing := range AllowedExchangeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Exchange value
func (v Exchange) Ptr() *Exchange {
	return &v
}

type NullableExchange struct {
	value *Exchange
	isSet bool
}

func (v NullableExchange) Get() *Exchange {
	return v.value
}

func (v *NullableExchange) Set(val *Exchange) {
	v.value = val
	v.isSet = true
}

func (v NullableExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchange(val *Exchange) *NullableExchange {
	return &NullableExchange{value: val, isSet: true}
}

func (v NullableExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

