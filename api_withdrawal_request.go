/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// WithdrawalRequestAPIService WithdrawalRequestAPI service
type WithdrawalRequestAPIService service

type ApiCancelWithdrawalRequestApiV1WithdrawalRequestIdPatchRequest struct {
	ctx context.Context
	ApiService *WithdrawalRequestAPIService
	id int32
}

func (r ApiCancelWithdrawalRequestApiV1WithdrawalRequestIdPatchRequest) Execute() (*http.Response, error) {
	return r.ApiService.CancelWithdrawalRequestApiV1WithdrawalRequestIdPatchExecute(r)
}

/*
CancelWithdrawalRequestApiV1WithdrawalRequestIdPatch Cancel Withdrawal Request

Cancel withdrawal request

Query Parameters
-----------
- `id` **(required)**: ID of the withdrawal request to cancel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiCancelWithdrawalRequestApiV1WithdrawalRequestIdPatchRequest
*/
func (a *WithdrawalRequestAPIService) CancelWithdrawalRequestApiV1WithdrawalRequestIdPatch(ctx context.Context, id int32) ApiCancelWithdrawalRequestApiV1WithdrawalRequestIdPatchRequest {
	return ApiCancelWithdrawalRequestApiV1WithdrawalRequestIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *WithdrawalRequestAPIService) CancelWithdrawalRequestApiV1WithdrawalRequestIdPatchExecute(r ApiCancelWithdrawalRequestApiV1WithdrawalRequestIdPatchRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WithdrawalRequestAPIService.CancelWithdrawalRequestApiV1WithdrawalRequestIdPatch")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wallet/api/v1/withdrawal_request/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.id < 1 {
		return nil, reportError("id must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v HTTPResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateWithdrawalRequestApiV1WithdrawalRequestPostRequest struct {
	ctx context.Context
	ApiService *WithdrawalRequestAPIService
	baseWithdrawalRequestInsert *BaseWithdrawalRequestInsert
}

func (r ApiCreateWithdrawalRequestApiV1WithdrawalRequestPostRequest) BaseWithdrawalRequestInsert(baseWithdrawalRequestInsert BaseWithdrawalRequestInsert) ApiCreateWithdrawalRequestApiV1WithdrawalRequestPostRequest {
	r.baseWithdrawalRequestInsert = &baseWithdrawalRequestInsert
	return r
}

func (r ApiCreateWithdrawalRequestApiV1WithdrawalRequestPostRequest) Execute() (*WithdrawalRequest, *http.Response, error) {
	return r.ApiService.CreateWithdrawalRequestApiV1WithdrawalRequestPostExecute(r)
}

/*
CreateWithdrawalRequestApiV1WithdrawalRequestPost Create Withdrawal Request

Create withdrawal request

Body Parameters
-----------
- `amount` **(required)**: Amount to withdraw denominated in the currency symbol.
- `destination` **(required)**: Address to withdraw to (bank account details for fiat, blockchain address for cryptocurrency).
- `currency_id` **(required)**: ID of the currency with which to withdraw (depends on desired symbol and network).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateWithdrawalRequestApiV1WithdrawalRequestPostRequest
*/
func (a *WithdrawalRequestAPIService) CreateWithdrawalRequestApiV1WithdrawalRequestPost(ctx context.Context) ApiCreateWithdrawalRequestApiV1WithdrawalRequestPostRequest {
	return ApiCreateWithdrawalRequestApiV1WithdrawalRequestPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return WithdrawalRequest
func (a *WithdrawalRequestAPIService) CreateWithdrawalRequestApiV1WithdrawalRequestPostExecute(r ApiCreateWithdrawalRequestApiV1WithdrawalRequestPostRequest) (*WithdrawalRequest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *WithdrawalRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WithdrawalRequestAPIService.CreateWithdrawalRequestApiV1WithdrawalRequestPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wallet/api/v1/withdrawal_request"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.baseWithdrawalRequestInsert == nil {
		return localVarReturnValue, nil, reportError("baseWithdrawalRequestInsert is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.baseWithdrawalRequestInsert
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v HTTPResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v HTTPResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest struct {
	ctx context.Context
	ApiService *WithdrawalRequestAPIService
	currencyId *int32
	symbol *string
	network *string
	status *WithdrawalRequestStatus
	page *int32
	pageSize *int32
	start *time.Time
	end *time.Time
}

func (r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) CurrencyId(currencyId int32) ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest {
	r.currencyId = &currencyId
	return r
}

func (r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) Symbol(symbol string) ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest {
	r.symbol = &symbol
	return r
}

func (r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) Network(network string) ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest {
	r.network = &network
	return r
}

func (r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) Status(status WithdrawalRequestStatus) ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest {
	r.status = &status
	return r
}

func (r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) Page(page int32) ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest {
	r.page = &page
	return r
}

func (r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) PageSize(pageSize int32) ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) Start(start time.Time) ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest {
	r.start = &start
	return r
}

func (r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) End(end time.Time) ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest {
	r.end = &end
	return r
}

func (r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) Execute() ([]WithdrawalRequest, *http.Response, error) {
	return r.ApiService.GetAllWithdrawalRequestsApiV1WithdrawalRequestGetExecute(r)
}

/*
GetAllWithdrawalRequestsApiV1WithdrawalRequestGet Get All Withdrawal Requests

Gets all withdrawal requests with pagination

Query Parameters
-----------
- `page` **(optional)**: Page number/window to query for (defaults to 0 for the first page).
- `page_size` **(optional)**: Size of the page returned (defaults to 1, maximum size = 1000 records).
- `currency_id` **(optional)**: ID of the currency to query for.
- `symbol` **(optional)**: Name of currency to filter on (e.g. BTC) (if currency_id not supplied).
- `network` **(optional)**: Name of the blockchain network to filter on (if currency_id not supplied).
- `status` **(optional)**: Filter on the status of the withdrawal request.
- `start` **(optional)**: Start date-time pagination.
- `end` **(optional)**: End date-time pagination.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest
*/
func (a *WithdrawalRequestAPIService) GetAllWithdrawalRequestsApiV1WithdrawalRequestGet(ctx context.Context) ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest {
	return ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []WithdrawalRequest
func (a *WithdrawalRequestAPIService) GetAllWithdrawalRequestsApiV1WithdrawalRequestGetExecute(r ApiGetAllWithdrawalRequestsApiV1WithdrawalRequestGetRequest) ([]WithdrawalRequest, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []WithdrawalRequest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WithdrawalRequestAPIService.GetAllWithdrawalRequestsApiV1WithdrawalRequestGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/wallet/api/v1/withdrawal_request"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.currencyId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "currency_id", r.currencyId, "")
	}
	if r.symbol != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "symbol", r.symbol, "")
	}
	if r.network != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "network", r.network, "")
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	} else {
		var defaultValue int32 = 1
		r.pageSize = &defaultValue
	}
	if r.start != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "start", r.start, "")
	}
	if r.end != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "end", r.end, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
