/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
)

// checks if the ChargeMetaInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargeMetaInput{}

// ChargeMetaInput struct for ChargeMetaInput
type ChargeMetaInput struct {
	GoodsDetails []GoodsInput `json:"goods_details,omitempty"`
	Shipping NullableShippingInput `json:"shipping,omitempty"`
	Buyer NullableBuyer `json:"buyer,omitempty"`
	Description *string `json:"description,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChargeMetaInput ChargeMetaInput

// NewChargeMetaInput instantiates a new ChargeMetaInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargeMetaInput() *ChargeMetaInput {
	this := ChargeMetaInput{}
	var description string = "Miscellaneous"
	this.Description = &description
	return &this
}

// NewChargeMetaInputWithDefaults instantiates a new ChargeMetaInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargeMetaInputWithDefaults() *ChargeMetaInput {
	this := ChargeMetaInput{}
	var description string = "Miscellaneous"
	this.Description = &description
	return &this
}

// GetGoodsDetails returns the GoodsDetails field value if set, zero value otherwise.
func (o *ChargeMetaInput) GetGoodsDetails() []GoodsInput {
	if o == nil || IsNil(o.GoodsDetails) {
		var ret []GoodsInput
		return ret
	}
	return o.GoodsDetails
}

// GetGoodsDetailsOk returns a tuple with the GoodsDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeMetaInput) GetGoodsDetailsOk() ([]GoodsInput, bool) {
	if o == nil || IsNil(o.GoodsDetails) {
		return nil, false
	}
	return o.GoodsDetails, true
}

// HasGoodsDetails returns a boolean if a field has been set.
func (o *ChargeMetaInput) HasGoodsDetails() bool {
	if o != nil && !IsNil(o.GoodsDetails) {
		return true
	}

	return false
}

// SetGoodsDetails gets a reference to the given []GoodsInput and assigns it to the GoodsDetails field.
func (o *ChargeMetaInput) SetGoodsDetails(v []GoodsInput) {
	o.GoodsDetails = v
}

// GetShipping returns the Shipping field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeMetaInput) GetShipping() ShippingInput {
	if o == nil || IsNil(o.Shipping.Get()) {
		var ret ShippingInput
		return ret
	}
	return *o.Shipping.Get()
}

// GetShippingOk returns a tuple with the Shipping field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeMetaInput) GetShippingOk() (*ShippingInput, bool) {
	if o == nil {
		return nil, false
	}
	return o.Shipping.Get(), o.Shipping.IsSet()
}

// HasShipping returns a boolean if a field has been set.
func (o *ChargeMetaInput) HasShipping() bool {
	if o != nil && o.Shipping.IsSet() {
		return true
	}

	return false
}

// SetShipping gets a reference to the given NullableShippingInput and assigns it to the Shipping field.
func (o *ChargeMetaInput) SetShipping(v ShippingInput) {
	o.Shipping.Set(&v)
}
// SetShippingNil sets the value for Shipping to be an explicit nil
func (o *ChargeMetaInput) SetShippingNil() {
	o.Shipping.Set(nil)
}

// UnsetShipping ensures that no value is present for Shipping, not even an explicit nil
func (o *ChargeMetaInput) UnsetShipping() {
	o.Shipping.Unset()
}

// GetBuyer returns the Buyer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChargeMetaInput) GetBuyer() Buyer {
	if o == nil || IsNil(o.Buyer.Get()) {
		var ret Buyer
		return ret
	}
	return *o.Buyer.Get()
}

// GetBuyerOk returns a tuple with the Buyer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChargeMetaInput) GetBuyerOk() (*Buyer, bool) {
	if o == nil {
		return nil, false
	}
	return o.Buyer.Get(), o.Buyer.IsSet()
}

// HasBuyer returns a boolean if a field has been set.
func (o *ChargeMetaInput) HasBuyer() bool {
	if o != nil && o.Buyer.IsSet() {
		return true
	}

	return false
}

// SetBuyer gets a reference to the given NullableBuyer and assigns it to the Buyer field.
func (o *ChargeMetaInput) SetBuyer(v Buyer) {
	o.Buyer.Set(&v)
}
// SetBuyerNil sets the value for Buyer to be an explicit nil
func (o *ChargeMetaInput) SetBuyerNil() {
	o.Buyer.Set(nil)
}

// UnsetBuyer ensures that no value is present for Buyer, not even an explicit nil
func (o *ChargeMetaInput) UnsetBuyer() {
	o.Buyer.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ChargeMetaInput) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargeMetaInput) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ChargeMetaInput) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ChargeMetaInput) SetDescription(v string) {
	o.Description = &v
}

func (o ChargeMetaInput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargeMetaInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GoodsDetails) {
		toSerialize["goods_details"] = o.GoodsDetails
	}
	if o.Shipping.IsSet() {
		toSerialize["shipping"] = o.Shipping.Get()
	}
	if o.Buyer.IsSet() {
		toSerialize["buyer"] = o.Buyer.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChargeMetaInput) UnmarshalJSON(data []byte) (err error) {
	varChargeMetaInput := _ChargeMetaInput{}

	err = json.Unmarshal(data, &varChargeMetaInput)

	if err != nil {
		return err
	}

	*o = ChargeMetaInput(varChargeMetaInput)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "goods_details")
		delete(additionalProperties, "shipping")
		delete(additionalProperties, "buyer")
		delete(additionalProperties, "description")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChargeMetaInput struct {
	value *ChargeMetaInput
	isSet bool
}

func (v NullableChargeMetaInput) Get() *ChargeMetaInput {
	return v.value
}

func (v *NullableChargeMetaInput) Set(val *ChargeMetaInput) {
	v.value = val
	v.isSet = true
}

func (v NullableChargeMetaInput) IsSet() bool {
	return v.isSet
}

func (v *NullableChargeMetaInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargeMetaInput(val *ChargeMetaInput) *NullableChargeMetaInput {
	return &NullableChargeMetaInput{value: val, isSet: true}
}

func (v NullableChargeMetaInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargeMetaInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


