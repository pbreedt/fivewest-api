/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TransactionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionResponse{}

// TransactionResponse struct for TransactionResponse
type TransactionResponse struct {
	UpdatedAt NullableTime `json:"updated_at,omitempty"`
	Id string `json:"id"`
	PaymentAmount string `json:"payment_amount"`
	Status *TransactionStatus `json:"status,omitempty"`
	Currency CurrencyResponse `json:"currency"`
	ChargeId string `json:"charge_id"`
	Late bool `json:"late"`
	Hash NullableString `json:"hash,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	SentAmount NullableString `json:"sent_amount,omitempty"`
	PayInstructions PayInstructions `json:"pay_instructions"`
}

type _TransactionResponse TransactionResponse

// NewTransactionResponse instantiates a new TransactionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionResponse(id string, paymentAmount string, currency CurrencyResponse, chargeId string, late bool, createdAt time.Time, payInstructions PayInstructions) *TransactionResponse {
	this := TransactionResponse{}
	this.Id = id
	this.PaymentAmount = paymentAmount
	var status TransactionStatus = TRANSACTIONSTATUS_PENDING
	this.Status = &status
	this.Currency = currency
	this.ChargeId = chargeId
	this.Late = late
	this.CreatedAt = createdAt
	this.PayInstructions = payInstructions
	return &this
}

// NewTransactionResponseWithDefaults instantiates a new TransactionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionResponseWithDefaults() *TransactionResponse {
	this := TransactionResponse{}
	var status TransactionStatus = TRANSACTIONSTATUS_PENDING
	this.Status = &status
	return &this
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TransactionResponse) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *TransactionResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *TransactionResponse) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *TransactionResponse) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetId returns the Id field value
func (o *TransactionResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TransactionResponse) SetId(v string) {
	o.Id = v
}

// GetPaymentAmount returns the PaymentAmount field value
func (o *TransactionResponse) GetPaymentAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentAmount
}

// GetPaymentAmountOk returns a tuple with the PaymentAmount field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetPaymentAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentAmount, true
}

// SetPaymentAmount sets field value
func (o *TransactionResponse) SetPaymentAmount(v string) {
	o.PaymentAmount = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TransactionResponse) GetStatus() TransactionStatus {
	if o == nil || IsNil(o.Status) {
		var ret TransactionStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetStatusOk() (*TransactionStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TransactionResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given TransactionStatus and assigns it to the Status field.
func (o *TransactionResponse) SetStatus(v TransactionStatus) {
	o.Status = &v
}

// GetCurrency returns the Currency field value
func (o *TransactionResponse) GetCurrency() CurrencyResponse {
	if o == nil {
		var ret CurrencyResponse
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetCurrencyOk() (*CurrencyResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *TransactionResponse) SetCurrency(v CurrencyResponse) {
	o.Currency = v
}

// GetChargeId returns the ChargeId field value
func (o *TransactionResponse) GetChargeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChargeId
}

// GetChargeIdOk returns a tuple with the ChargeId field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetChargeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChargeId, true
}

// SetChargeId sets field value
func (o *TransactionResponse) SetChargeId(v string) {
	o.ChargeId = v
}

// GetLate returns the Late field value
func (o *TransactionResponse) GetLate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Late
}

// GetLateOk returns a tuple with the Late field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetLateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Late, true
}

// SetLate sets field value
func (o *TransactionResponse) SetLate(v bool) {
	o.Late = v
}

// GetHash returns the Hash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResponse) GetHash() string {
	if o == nil || IsNil(o.Hash.Get()) {
		var ret string
		return ret
	}
	return *o.Hash.Get()
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResponse) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hash.Get(), o.Hash.IsSet()
}

// HasHash returns a boolean if a field has been set.
func (o *TransactionResponse) HasHash() bool {
	if o != nil && o.Hash.IsSet() {
		return true
	}

	return false
}

// SetHash gets a reference to the given NullableString and assigns it to the Hash field.
func (o *TransactionResponse) SetHash(v string) {
	o.Hash.Set(&v)
}
// SetHashNil sets the value for Hash to be an explicit nil
func (o *TransactionResponse) SetHashNil() {
	o.Hash.Set(nil)
}

// UnsetHash ensures that no value is present for Hash, not even an explicit nil
func (o *TransactionResponse) UnsetHash() {
	o.Hash.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *TransactionResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TransactionResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetSentAmount returns the SentAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TransactionResponse) GetSentAmount() string {
	if o == nil || IsNil(o.SentAmount.Get()) {
		var ret string
		return ret
	}
	return *o.SentAmount.Get()
}

// GetSentAmountOk returns a tuple with the SentAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TransactionResponse) GetSentAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SentAmount.Get(), o.SentAmount.IsSet()
}

// HasSentAmount returns a boolean if a field has been set.
func (o *TransactionResponse) HasSentAmount() bool {
	if o != nil && o.SentAmount.IsSet() {
		return true
	}

	return false
}

// SetSentAmount gets a reference to the given NullableString and assigns it to the SentAmount field.
func (o *TransactionResponse) SetSentAmount(v string) {
	o.SentAmount.Set(&v)
}
// SetSentAmountNil sets the value for SentAmount to be an explicit nil
func (o *TransactionResponse) SetSentAmountNil() {
	o.SentAmount.Set(nil)
}

// UnsetSentAmount ensures that no value is present for SentAmount, not even an explicit nil
func (o *TransactionResponse) UnsetSentAmount() {
	o.SentAmount.Unset()
}

// GetPayInstructions returns the PayInstructions field value
func (o *TransactionResponse) GetPayInstructions() PayInstructions {
	if o == nil {
		var ret PayInstructions
		return ret
	}

	return o.PayInstructions
}

// GetPayInstructionsOk returns a tuple with the PayInstructions field value
// and a boolean to check if the value has been set.
func (o *TransactionResponse) GetPayInstructionsOk() (*PayInstructions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayInstructions, true
}

// SetPayInstructions sets field value
func (o *TransactionResponse) SetPayInstructions(v PayInstructions) {
	o.PayInstructions = v
}

func (o TransactionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UpdatedAt.IsSet() {
		toSerialize["updated_at"] = o.UpdatedAt.Get()
	}
	toSerialize["id"] = o.Id
	toSerialize["payment_amount"] = o.PaymentAmount
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["currency"] = o.Currency
	toSerialize["charge_id"] = o.ChargeId
	toSerialize["late"] = o.Late
	if o.Hash.IsSet() {
		toSerialize["hash"] = o.Hash.Get()
	}
	toSerialize["created_at"] = o.CreatedAt
	if o.SentAmount.IsSet() {
		toSerialize["sent_amount"] = o.SentAmount.Get()
	}
	toSerialize["pay_instructions"] = o.PayInstructions
	return toSerialize, nil
}

func (o *TransactionResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"payment_amount",
		"currency",
		"charge_id",
		"late",
		"created_at",
		"pay_instructions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionResponse := _TransactionResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionResponse)

	if err != nil {
		return err
	}

	*o = TransactionResponse(varTransactionResponse)

	return err
}

type NullableTransactionResponse struct {
	value *TransactionResponse
	isSet bool
}

func (v NullableTransactionResponse) Get() *TransactionResponse {
	return v.value
}

func (v *NullableTransactionResponse) Set(val *TransactionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionResponse(val *TransactionResponse) *NullableTransactionResponse {
	return &NullableTransactionResponse{value: val, isSet: true}
}

func (v NullableTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


