/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"fmt"
)

// TransferLocation An enumeration.
type TransferLocation int32

// List of TransferLocation
const (
	TRANSFERLOCATION__0 TransferLocation = 0
	TRANSFERLOCATION__1 TransferLocation = 1
	TRANSFERLOCATION__2 TransferLocation = 2
	TRANSFERLOCATION__3 TransferLocation = 3
	TRANSFERLOCATION__4 TransferLocation = 4
	TRANSFERLOCATION__5 TransferLocation = 5
	TRANSFERLOCATION__6 TransferLocation = 6
	TRANSFERLOCATION__7 TransferLocation = 7
	TRANSFERLOCATION__8 TransferLocation = 8
	TRANSFERLOCATION__9 TransferLocation = 9
	TRANSFERLOCATION__10 TransferLocation = 10
	TRANSFERLOCATION__11 TransferLocation = 11
	TRANSFERLOCATION__12 TransferLocation = 12
)

// All allowed values of TransferLocation enum
var AllowedTransferLocationEnumValues = []TransferLocation{
	0,
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10,
	11,
	12,
}

func (v *TransferLocation) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TransferLocation(value)
	for _, existing := range AllowedTransferLocationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TransferLocation", value)
}

// NewTransferLocationFromValue returns a pointer to a valid TransferLocation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransferLocationFromValue(v int32) (*TransferLocation, error) {
	ev := TransferLocation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TransferLocation: valid values are %v", v, AllowedTransferLocationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransferLocation) IsValid() bool {
	for _, existing := range AllowedTransferLocationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TransferLocation value
func (v TransferLocation) Ptr() *TransferLocation {
	return &v
}

type NullableTransferLocation struct {
	value *TransferLocation
	isSet bool
}

func (v NullableTransferLocation) Get() *TransferLocation {
	return v.value
}

func (v *NullableTransferLocation) Set(val *TransferLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableTransferLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableTransferLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransferLocation(val *TransferLocation) *NullableTransferLocation {
	return &NullableTransferLocation{value: val, isSet: true}
}

func (v NullableTransferLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransferLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

