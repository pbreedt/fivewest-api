/*
FiveWest Client API

API Documentation for FiveWest's wallet and RfQ trading services. Please visit dashboard.fivewest.co.za to sign up. Once your account has been verified to the sufficient level necessary for the given service, you can create an API key and secret with fine-grained service permissions in the 'API Management' section of the 'Profile' tab. These credentials must be provided in the /profile/api/v1/auth/token route in order to acquire a JWT to make further requests with. This JWT is valid for one week; the credentials do not expire but may be deleted.

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package fivewestapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the WithdrawalRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WithdrawalRequest{}

// WithdrawalRequest struct for WithdrawalRequest
type WithdrawalRequest struct {
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	UpdatedBy *string `json:"updated_by,omitempty"`
	Id int32 `json:"id"`
	Currency Currency `json:"currency"`
	CurrencyId int32 `json:"currency_id"`
	TransferId *int32 `json:"transfer_id,omitempty"`
	Uid string `json:"uid"`
	Amount float32 `json:"amount"`
	Status *WithdrawalRequestStatus `json:"status,omitempty"`
	Destination Destination `json:"destination"`
	Wallet Wallet `json:"wallet"`
	Reference *string `json:"reference,omitempty"`
}

type _WithdrawalRequest WithdrawalRequest

// NewWithdrawalRequest instantiates a new WithdrawalRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWithdrawalRequest(id int32, currency Currency, currencyId int32, uid string, amount float32, destination Destination, wallet Wallet) *WithdrawalRequest {
	this := WithdrawalRequest{}
	this.Id = id
	this.Currency = currency
	this.CurrencyId = currencyId
	this.Uid = uid
	this.Amount = amount
	var status WithdrawalRequestStatus = WITHDRAWALREQUESTSTATUS__0
	this.Status = &status
	this.Destination = destination
	this.Wallet = wallet
	return &this
}

// NewWithdrawalRequestWithDefaults instantiates a new WithdrawalRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWithdrawalRequestWithDefaults() *WithdrawalRequest {
	this := WithdrawalRequest{}
	var status WithdrawalRequestStatus = WITHDRAWALREQUESTSTATUS__0
	this.Status = &status
	return &this
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *WithdrawalRequest) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *WithdrawalRequest) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *WithdrawalRequest) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *WithdrawalRequest) GetUpdatedBy() string {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret string
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetUpdatedByOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *WithdrawalRequest) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given string and assigns it to the UpdatedBy field.
func (o *WithdrawalRequest) SetUpdatedBy(v string) {
	o.UpdatedBy = &v
}

// GetId returns the Id field value
func (o *WithdrawalRequest) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *WithdrawalRequest) SetId(v int32) {
	o.Id = v
}

// GetCurrency returns the Currency field value
func (o *WithdrawalRequest) GetCurrency() Currency {
	if o == nil {
		var ret Currency
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetCurrencyOk() (*Currency, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *WithdrawalRequest) SetCurrency(v Currency) {
	o.Currency = v
}

// GetCurrencyId returns the CurrencyId field value
func (o *WithdrawalRequest) GetCurrencyId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CurrencyId
}

// GetCurrencyIdOk returns a tuple with the CurrencyId field value
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetCurrencyIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrencyId, true
}

// SetCurrencyId sets field value
func (o *WithdrawalRequest) SetCurrencyId(v int32) {
	o.CurrencyId = v
}

// GetTransferId returns the TransferId field value if set, zero value otherwise.
func (o *WithdrawalRequest) GetTransferId() int32 {
	if o == nil || IsNil(o.TransferId) {
		var ret int32
		return ret
	}
	return *o.TransferId
}

// GetTransferIdOk returns a tuple with the TransferId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetTransferIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TransferId) {
		return nil, false
	}
	return o.TransferId, true
}

// HasTransferId returns a boolean if a field has been set.
func (o *WithdrawalRequest) HasTransferId() bool {
	if o != nil && !IsNil(o.TransferId) {
		return true
	}

	return false
}

// SetTransferId gets a reference to the given int32 and assigns it to the TransferId field.
func (o *WithdrawalRequest) SetTransferId(v int32) {
	o.TransferId = &v
}

// GetUid returns the Uid field value
func (o *WithdrawalRequest) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *WithdrawalRequest) SetUid(v string) {
	o.Uid = v
}

// GetAmount returns the Amount field value
func (o *WithdrawalRequest) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *WithdrawalRequest) SetAmount(v float32) {
	o.Amount = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *WithdrawalRequest) GetStatus() WithdrawalRequestStatus {
	if o == nil || IsNil(o.Status) {
		var ret WithdrawalRequestStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetStatusOk() (*WithdrawalRequestStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *WithdrawalRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given WithdrawalRequestStatus and assigns it to the Status field.
func (o *WithdrawalRequest) SetStatus(v WithdrawalRequestStatus) {
	o.Status = &v
}

// GetDestination returns the Destination field value
func (o *WithdrawalRequest) GetDestination() Destination {
	if o == nil {
		var ret Destination
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetDestinationOk() (*Destination, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *WithdrawalRequest) SetDestination(v Destination) {
	o.Destination = v
}

// GetWallet returns the Wallet field value
func (o *WithdrawalRequest) GetWallet() Wallet {
	if o == nil {
		var ret Wallet
		return ret
	}

	return o.Wallet
}

// GetWalletOk returns a tuple with the Wallet field value
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetWalletOk() (*Wallet, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Wallet, true
}

// SetWallet sets field value
func (o *WithdrawalRequest) SetWallet(v Wallet) {
	o.Wallet = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *WithdrawalRequest) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WithdrawalRequest) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *WithdrawalRequest) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *WithdrawalRequest) SetReference(v string) {
	o.Reference = &v
}

func (o WithdrawalRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WithdrawalRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	toSerialize["id"] = o.Id
	toSerialize["currency"] = o.Currency
	toSerialize["currency_id"] = o.CurrencyId
	if !IsNil(o.TransferId) {
		toSerialize["transfer_id"] = o.TransferId
	}
	toSerialize["uid"] = o.Uid
	toSerialize["amount"] = o.Amount
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	toSerialize["destination"] = o.Destination
	toSerialize["wallet"] = o.Wallet
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	return toSerialize, nil
}

func (o *WithdrawalRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"currency",
		"currency_id",
		"uid",
		"amount",
		"destination",
		"wallet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWithdrawalRequest := _WithdrawalRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWithdrawalRequest)

	if err != nil {
		return err
	}

	*o = WithdrawalRequest(varWithdrawalRequest)

	return err
}

type NullableWithdrawalRequest struct {
	value *WithdrawalRequest
	isSet bool
}

func (v NullableWithdrawalRequest) Get() *WithdrawalRequest {
	return v.value
}

func (v *NullableWithdrawalRequest) Set(val *WithdrawalRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWithdrawalRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWithdrawalRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWithdrawalRequest(val *WithdrawalRequest) *NullableWithdrawalRequest {
	return &NullableWithdrawalRequest{value: val, isSet: true}
}

func (v NullableWithdrawalRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWithdrawalRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


